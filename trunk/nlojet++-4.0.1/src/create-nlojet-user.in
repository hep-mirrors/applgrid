#!/bin/sh


package=@PACKAGE@
version=@VERSION@

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
libexecdir=@libexecdir@
includedir=@includedir@

cc='@CC@'
cflags=@CFLAGS@

cxx='@CXX@'
cxxflags=@CXXFLAGS@

f77='@F77@'
fflags=@FFLAGS@

ld='@LD@'
ldflags=@LDFLAGS@

#  libtool program
libtool="$libexecdir/nlo++/libtool-nlojet++" 

#  make the object directory
objdir=".obj"
if test ! -d $objdir;  then
  mkdir $objdir
fi

show="echo"
ac_prev= 
for option
do
  # If the previous option needs an argument, assign it.
   if test -n "$ac_prev"; then
    eval "$ac_prev=\$option"
    ac_prev=
    continue
   fi

   case "$option" in
     -Wf,*)
       fflags=`echo "$option" | sed 's/-Wf,//'| sed 's/,/ /g'`
       ;;
     -Wc,*)
       _cflags=`echo "$option" | sed 's/-Wc,//'| sed 's/,/ /g'`
       cflags="$cflags $_cflags"
       ;;
     -Wx,*)
       cxxflags=`echo "$option" | sed 's/-Wx,//'| sed 's/,/ /g'`
       ;;
     -Wl,*)
       ldflags=`echo "$option" | sed 's/-Wl,//'| sed 's/,/ /g'`
       ;;
     -o)
       ac_prev=output
       ;;
     --silent | --quiet)
       show=:
       libtool="$libtool --silent"
   esac
done

include="-I${includedir}/nlo++" 
cxxcompile="$libtool --mode=compile  $cxx -c $include $cxxflags"
ccompile="$libtool --mode=compile $cc -c $include $cflags"
f77compile="$libtool --mode=compile $f77 -c $fflags"

objects=
use_fortran=no

for option
do
    case "$option" in
    *.f)   xform=f ;;
    *.f77) xform=f77 ;;
    *.F)   xform=F ;;
    *.for) xform=for ;;
    *.c)   xform=c ;;
    *.cc)  xform=cc ;;
    *.c++) xform=c++ ;;
    *.cxx) xform=cxx ;;
    *.C)   xform=C ;;
    *.cpp) xform=cpp ;;
    esac

    case "$option" in
    *.f | *.F | *.for)
	obj=`echo "$option" | sed -e "s/\.$xform$/.lo/"`
	echo "Creating object $output-$obj from $option."
	if !(test -f "$objdir/$output-$obj") || test "$option" -nt "$objdir/$output-$obj"; then
	    $show "$f77compile $option -o $objdir/$output-$obj"
	    $f77compile $option -o $objdir/$output-$obj
	fi

	objects="$objects $objdir/$output-$obj"
	use_fortran=yes
	;;
    *.c)
	obj=`echo "$option" | sed -e "s/\.$xform$/.lo/"`
	echo "Creating object $output-$obj from $option."
	if !(test -f "$objdir/$output-$obj") || test "$option" -nt "$objdir/$output-$obj"; then
	    $show "$ccompile $option -o $objdir/$output-$obj"
	    $ccompile $option -o $objdir/$output-$obj
	fi
	objects="$objects $objdir/$output-$obj"
	;;
    *.cc | *.c++ | *.cxx | *.C | *.cpp)
	obj=`echo "$option" | sed -e "s/\.$xform$/.lo/"`
	echo "Creating object $output-$obj from $option."
	if !(test -f "$objdir/$output-$obj") || test "$option" -nt "$objdir/$output-$obj"; then
	    $show "$cxxcompile $option -o $objdir/$output-$obj"
	    $cxxcompile $option -o $objdir/$output-$obj
	fi
	objects="$objects $objdir/$output-$obj"
	;;
   esac
done

#   Adding the f77 interface library
ldflags="$ldflags -L${libdir} -lnlo++"

#   Adding the f77 standard libraries if it is necessary
if test "$use_fortran" = yes; then
  ldflags="$ldflags @FLIBS@"
fi

#   Creating the module
path_current=`pwd`

echo "Creating loadable module $output.la"
$show "$libtool --mode=link $cxx -o $output.la -module -avoid-version $objects $ldflags -rpath $path_current"
$libtool --mode=link $cxx -o $output.la -module -avoid-version $objects $ldflags -rpath $path_current
