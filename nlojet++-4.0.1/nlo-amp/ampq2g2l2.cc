//  Copyright (C) 2002 Zoltan Nagy
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

//   nlo includes
#include "bits/nlo-color.h"
#include "ampq2g2l2.h"
#include "defmacros.h"


namespace nlo {


  std::complex<double> 
  ampq2g2l2::M1(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double g3 = G3, d12 = D12, d56 = D56;

    double s14 = S(1,4), s23 = S(2,3), s12 = S(1,2), s34 = S(3,4),
      s56 = S(5, 6), t124 = S3(1, 2, 4), t123 = S3(1, 2, 3); 

    _ComplexD b13 = B(1,3), a12 = A(1,2), a15 = A(1,5), b14 = B(1,4),
      a24 = A(2,4), a34 = A(3,4), b46 = B(4,6), b56 = B(5,6), a56 = A(5,6),
      a21 = A(2,1), a25 = A(2,5), b16 = B(1,6); 

    _ComplexD a526 = A3(5,2,6), a156 = A3(1,5,6), a216 = A3(2,1,6),
      a256 = A3(2,5,6), a213 = A3(2,1,3), a126 = A3(1,2,6), a534 = A3(5,3,4),
      a456 = A3(4,5,6), b1234 = B4(1,2,3,4), a1265 = A4(1,2,6,5);

    _ComplexD c1342 = C(1,3,4,2), c3124 = C(3,1,2,4), c5341 = C(5,3,4,1),
      c2341 = C(2,3,4,1), c2342 = C(2,3,4,2), c5126 = C(5,1,2,6);

    _ComplexD M = b13/(c1342*c3124*g3)
      *(2.0*a12*a526*(t123*d12 + s56*d56) 
	+ 2.0*a12*a15*a456*(b14*d56 - 2.0*b1234)
	+ s56*a24*(a15*b46*d56 - 2.0*a126*a534)
	)*I3_3m(s12, s34, s56)

      + 2.0/(c1342*c3124*g3)
      *(b13/a56*(a21*c5341 - c2341*a15 - c2342*a25)*(a15*t124 + a1265)
	- b16*a24/(a34*b56)*((s14 - s23)*(a126*d12 - a156*d56) 
			     + c1342*(a216*d12 - a256*d56))
	+ 2.0*a213*c5126*(s14 - s23)
	)*(Log(-s12) - Log(-s56));

    return M;
  }

  std::complex<double> 
  ampq2g2l2::M2a(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double g3 = G3, d56 = D56, d12 = D12, d34 = D34, s12 = S(1,2),
      s56 = S(5, 6), s34 = S(3,4), t123 = S3(1,2,3), t124 = S3(1,2,4); 

    _ComplexD b12 = B(1,2), b23 = B(2,3), a12 = A(1,2), b13 = B(1,3),
      a35 = A(3,5), a56 = A(5,6), a45 = A(4,5), a34 = A(3,4), b14 = B(1,4),
      a24 = A(2,4), b46 = B(4,6), b56 = B(5,6), b36 = B(3,6), a25 = A(2,5),
      a23 = A(2,3), b43 = B(4,3);

    _ComplexD c4123 = C(4,1,2,3), c3124 = C(3,1,2,4), c5126 = C(5,1,2,6),
      c5123 = C(5,1,2,3), c5124 = C(5,1,2,4), c2143 = C(2,1,4,3),
      c4231 = C(4,2,3,1), c3126 = C(3,1,2,6); 

    _ComplexD a564 = A3(5,6,4), a236 = A3(2,3,6), a256 = A3(2,5,6),
      a346 = A3(3,4,6), a213 = A3(2,1,3), a536 = A3(5,3,6), a546 = A3(5,4,6),
      a534 = A3(5,3,4), a541 = A3(5,4,1), a561 = A3(5,6,1), a321 = A3(3,2,1),
      a214 = A3(2,1,4); 

    _ComplexD b1243 = B4(1,2,4,3), b1234 = B4(1,2,3,4), a2465 = A4(2,4,6,5),
      a2135 = A4(2,1,3,5), a2134 = A4(2,1,3,4), a5345 = A4(5,3,4,5),
      b6346 = B4(6,3,4,6), b3456 = B4(3,4,5,6), b6431 = B4(6,4,3,1);


    _ComplexD M = 0.5*b12/(b23*c4123)
      *(
	6.0*a12*c3124*c5126*(b13*d56 - 2.0*b1243)/(g3*g3) 

	+ 1.0/g3*(a214*a35*c5123/a56
		  - a12*a45/(a34*a56)*(b13*a45*c3124*d12/c4123  
				       - a35*(2.0*b14*d12 - b1234)) 
		  - a24*a35*d12/(a34*a56)*(c5124 - a564) 
		  + b46/b56*(2.0*(a236*d34 - a256*d56) + a346*c2143) 
		  - a213*(a536 - a546)*d12/c4123
		  - 4.0*a12*b36*(a35*b14 + a34*a56*b13*b46/c4123) 
		  + b46*(a2465 - a2135) 
		  )
	+ c5123*(a25*a34 - a23*a45)/(a34*a56*c4123)
	)*(Log(-s12) - Log(-s56))

      - 0.5/(b23*c4123*g3)
      *(- 6.0*b12*c5126*b43*c3124*(a24*d56 - 2.0*a2134)/g3 
	+ b13/c4123*(d34*(t123 - t124) - g3)*(a5345/a56 + b6346/b56) 
	+ a534/a56*(2.0*(a541*d34 - a561*d56) + c4231*c5124)
	- b46/b56*(2.0*a321*(b36*d12 - 2.0*b3456) 
		   + c4231*b43*c3126 - 3.0*b6431*d34) 
	)*(Log(-s34) - Log(-s56));

    return M;
  }

  std::complex<double> 
  ampq2g2l2::M2(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double g3 = G3, d12 = D12, d34 = D34, d56 = D56, s12 = S(1,2), 
      s34 = S(3,4), s56 = S(5,6), t124 = S3(1,2,4), t123 = S3(1,2,3);

    _ComplexD b23 = B(2,3), a56 = A(5,6), b12 = B(1,2), a12 = A(1,2), 
      b34 = B(3,4), a21 = A(2,1), b13 = B(1,3), a45 = A(4,5), b36 = B(3,6), 
      a23 = A(2,3), b46 = B(4,6), a35 = A(3,5), b64 = B(6,4), a34 = A(3,4),
      b56 = B(5,6); 

    _ComplexD c3124 = C(3,1,2,4), c5126 = C(5,1,2,6), c4123 = C(4,1,2,3),
      c4231 = C(4,2,3,1), c5123 = C(5,1,2,3), b1243 = B4(1,2,4,3),
      b6543 = B4(6,5,4,3); 

    _ComplexD a421 = A3(4,2,1), a431 = A3(4,3,1), a543 = A3(5,4,3), 
      a563 = A3(5,6,3), a243 = A3(2,4,3), a213 = A3(2,1,3), a546 = A3(5,4,6),
      a214 = A3(2,1,4), a541 = A3(5,4,1), a321 = A3(3,2,1);

    _ComplexD M = M2a(p1, p2, p3, p4, p5, p6) 
      + c4231*c5123*c5123/(b23*a56*c4123*c4123*c4123)
      *Ls_1_2mh(s34,t123,s12,s56)
      + b12/(b23*c4123) 
      *( 
	3.0*a12*b34*c3124*c5126/(g3*g3)*(a421*d12 - a431*d34) 
	- 1.0/g3*(a21*b13*c3124*a45*b36/c4123*(t124 - t123) 
		  + a23*b46*(a543*d34 - a563*d56) 
		  + c3124*(a243*c5126 + 3.0*a213*a546) 
		  - a214*a35*(b64*c4123 + 2.0*b6543 + b36*d12)
		  )
	+ a23*c5123*b46/t123
	)*I3_3m(s12, s34, s56)

      + b46*a541/(b23*c4123)*L1(-s56, -t123)/t123
      - a321*c5123*c5123/(b23*a56*c4123*c4123)*L0(-t123, -s12)/s12
      - a541*c5123*t123/(b23*a56*c4123*c4123)*L0(-t123, -s56)/s56
      - 0.5*(a421*d12 - a431*d34)/(b23*a34*c4123*g3)
      *(a34*b46*b46/b56 + a35*a35*b34/a56)
      - a35*b46*(b13*d56 - 2.0*b1243)/(b23*c4123*g3);

    return M;
  }

  std::complex<double> 
  ampq2g2l2::M3a(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double g3 = G3, s34 = S(3,4), s12 = S(1,2), s56 = S(5,6), d12 = D12, 
      d34 = D34, d56 = D56, t134 = S3(1,3,4), t234 = S3(2,3,4); 

    _ComplexD b24 = B(2,4), b23 = B(2,3), a12 = A(1,2), b56 = B(5,6),
      b14 = B(1,4), b26 = B(2,6), b12 = B(1,2), b46 = B(4,6), a13 = A(1,3),
      b16 = B(1,6), a56 = A(5,6), a35 = A(3,5), a23 = A(2,3), a15 = A(1,5),
      a25 = A(2,5), a34 = A(3,4), b34 = B(3,4); 

    _ComplexD c1342 = C(1,3,4,2), c3124 = C(3,1,2,4), c5126 = C(5,1,2,6), 
      c3126 = C(3,1,2,6), c3246 = C(3,2,4,6), c2341 = C(2,3,4,1),
      c3241 = C(3,2,4,1); 

    _ComplexD a524 = A3(5,2,4), a514 = A3(5,1,4), a326 = A3(3,2,6),
      a356 = A3(3,5,6), a314 = A3(3,1,4), a324 = A3(3,2,4); 

    _ComplexD a3265 = A4(3,2,6,5), a5125 = A4(5,1,2,5), b6126 = B4(6,1,2,6), 
      b4126 = B4(4,1,2,6), a5213 = A4(5,2,1,3);

    _ComplexD M = 0.5*b24/(b23*s34*c1342)
      *(
	6.0*s12*s34/(g3*g3)*(t134 - t234)*c3124*c5126  
	+ a12*d12/(b56*g3)*(c3126*b14*b26 + c3246*b12*b46
			    - a13*b24*(b16*b16 + b26*b26*c2341/c1342))
	+ b12*d12/(a56*g3)*(a524*(a12*a35 - a23*a15)
			    - a15*a25*c3124 + a15*a15*a13*b24*c2341/c1342) 
	- 2.0*a12*a35/g3*(b16*b24 + b14*b26)*d56
	- (a34*b46*b46/b56 + a35*a35*b34/a56)*s12*t234/g3 + a326*b46/b56
	- a13*b24/c1342*(a5125/a56 + b6126/b56)
	)*(Log(-s12) - Log(-s56))

      + 0.5*b24/(b23*c1342*g3)
      *(
	3*d56*(t134 - t234)*c3124*c5126/g3
	- (a326*b46/b56 - a514*a35/a56 
	   + 2.0*a15*b24/(a56*c1342)*(c3241*a15 - a3265))*d34
	+ (c3124 + 4.0*a13*b24*s56/c1342)*(a5125/a56 - b6126/b56)
	+ 8.0*s12*a15*b24*a356/c1342
	- 2.0*(a314 - a324)*c5126 + 4.0*(b4126*a35 + a5213*b46)
	)*(Log(-s34) - Log(-s56));

    return M;
  }

  std::complex<double> 
  ampq2g2l2::M3(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double g3 = G3, s34 = S(3,4), s12 = S(1,2), s56 = S(5,6), d12 = D12, 
      d34 = D34, d56 = D56, t134 = S3(1,3,4), t234 = S3(2,3,4); 

    _ComplexD a15 = A(1,5), b24 = B(2,4), b23 = B(2,3), b34 = B(3,4), 
      a56 = A(5,6), a13 = A(1,3), b21 = B(2,1), a23 = A(2,3), b12 = B(1,2),
      b13 = B(1,3), b14 = B(1,4), b41 = B(4,1), b42 = B(4,2), a35 = A(3,5), 
      a34 = A(3,4), a25 = A(2,5), b16 = B(1,6), b46 = B(4,6), b56 = B(5,6);

    _ComplexD c2341 = C(2,3,4,1), c1342 = C(1,3,4,2), c3124 = C(3,1,2,4), 
      c5126 = C(5,1,2,6), c1346 = C(1,3,4,6), c3126 = C(3,1,2,6),
      c4126 = C(4,1,2,6), c3142 = C(3,1,4,2), c2346 = C(2,3,4,6),
      c5342 = C(5,3,4,2), c5234 = C(5,2,3,4), b2134 = B4(2,1,3,4),
      a1243 = A4(1,2,4,3); 

    _ComplexD a214 = A3(2,1,4), a512 = A3(5,1,2), a346 = A3(3,4,6),
      a312 = A3(3,1,2), a342 = A3(3,4,2), a524 = A3(5,2,4), 
      a124 = A3(1,2,4), a134 = A3(1,3,4);

    _ComplexD M = M3a(p1, p2, p3, p4, p5, p6) 
      - a15*a15*b24*b24*b24*t234/(b23*b34*a56*c1342*c1342*c1342)
      *Ls_1_2mh(s12, t234, s34, s56)
      + b24/(b23*c1342*g3)
      *(
	1.5*s12*d12*(t134 - t234)*c3124*c5126/g3
	+ 0.5*s12*c3124*c5126 
	- a13*a15*b24*c2341/c1342*(b21*c1346 - b23*c3126 - b24*c4126)
	+ a214*(c3142*c5126 + a512*a346) 
	+a15*a23*(b24*(b12*c2346 - b13*c3126 - b14*c4126)
		  - b12*(b41*c1346 + b42*c2346))
	)*I3_3m(s12, s34, s56)

      + 0.5*a15*a15*b14*b24/(b23*b34*a56*c1342)
      *(-2.0*b24/c1342*L0(-s56, -t234) + b14*L1(-s56, -t234)/t234)
      - 0.5*a23*b24*c5342/(b23*a56*c1342)
      *((c5234/t234 - 2.0*a15*b24/c1342)*L0(-t234, -s34)/s34 
	+ a524*L1(-s34, -t234)/(t234*t234)) 

      + 0.5*b24/(b23*c1342*g3)
      *(- a35/a34*(a25/a56*(a312*d12 - a342*d34) - b16*(a13*d56 - 2.0*a1243)) 
	+ b46/b34*(b16/b56*(a124*d12 - a134*d34) + a25*(b24*d56 - 2.0*b2134))
	);

    return M;
  }

  std::complex<double> 
  ampq2g2l2::Atree1pppm(int p1, int p2, int p3, int p4, int p5, int p6) const {
    return _ComplexD(0.0,-1.0)*A(4,5)*A(4,5)/(A(1,2)*A(2,3)*A(3,4)*A(5,6));
  }

  std::complex<double> 
  ampq2g2l2::Fcc1pppm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s12 = S(1,2), s23 = S(2,3), s34 = S(3,4), s56 = S(5,6),
      t123 = S3(1,2,3), t234 = S3(2,3,4); 

    _ComplexD a45 = A(4,5), a12 = A(1,2), a23 = A(2,3), a56 = A(5,6),
      a51 = A(5,1), a34 = A(3,4);

    _ComplexD Fcc =  _ComplexD(0.0, -1.0)*Atree1pppm(p1, p2, p3, p4, p5, p6)
      *(- Ls_1(-s12, -t123, -s23, -t123)
	- Ls_1(-s23, -t234, -s34, -t234)
	- Ls_1_2me(t123, t234, s23, s56))

      + 2.0*a45*A3(5,2,3)/(a12*a23*a56)*L0(-t234, -s34)/s34
      + 2.0*a45*a51*C(4,2,3,1)/(a12*a23*a34*a56)*L0(-s56, -t234)/t234;

    return Fcc;
  }

  std::complex<double> 
  ampq2g2l2::Fsc1pppm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s56 = S(5,6), s34 = S(3,4), t234 = S3(2,3,4), t123 = S3(1,2,3);

    _ComplexD a45 = A(4,5), a15 = A(1,5), a54 = A(5,4), a12 = A(1,2), 
      a23 = A(2,3), a56 = A(5,6), b23 = B(2,3), a34 = A(3,4), b56 = B(5,6);

    _ComplexD a4325 = A4(4,3,2,5), c4231 = C(4,2,3,1), c4236 = C(4,2,3,6);

    _ComplexD Fsc = _ComplexD(0.0, -1.0)*Atree1pppm(p1, p2, p3, p4, p5, p6)
      *(- 0.5*A4(4,3,2,5)*a4325/(a45*a45)*L1(-s34, -t234)/(t234*t234)
	+ 0.5*c4231*a15*c4231*a15/(a45*a45)*L1(-s56, -t234)/(t234*t234))

      + 0.5*(- A3(5,2,3)*a54/(a12*a23*t234*a56)
	     - b23*a45*C(5,2,4,3)/(a12*t123*t234*a56)
	     + c4236*c4236/(a12*a23*a34*t234*b56) 
	     + A3(4,2,3)*B(6,1)*C(1,2,3,6)/(a12*a23*t123*t234*b56))
      + _ComplexD(0.0, -1.0)*As1pppm(p1, p2, p3, p4, p5, p6);

    return Fsc;
  }

  std::complex<double> 
  ampq2g2l2::Atree1ppmm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s23 = S(2,3), s56 = S(5,6);
    _ComplexD b34 = B(3,4), a12 = A(1,2), c5342 = C(5,3,4,2),
      c3126 = C(3,1,2,6);

    _ComplexD Atree = _ComplexD(0.0, 1.0)
      *(A(3,1)*B(1,2)*A(4,5)*c3126/(a12*s23*S3(1,2,3)*s56)
	- A(3,4)*B(4,2)*B(1,6)*c5342/(b34*s23*S3(2,3,4)*s56)
	- c5342*c3126/(a12*b34*s23*s56));

    return Atree;
  }

  std::complex<double> 
  ampq2g2l2::FAcc1ppmm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s12 = S(1,2), s23 = S(2,3), s34 = S(3,4), s56 = S(5,6),
      t123 = S3(1,2,3); 

    _ComplexD a13 = A(1,3), a12 = A(1,2), a23 = A(2,3), b56 = B(5,6), 
      b12 = B(1,2), a45 = A(4,5), b23 = B(2,3), b13 = B(1,3), a56 = A(5,6),
      a35 = A(3,5), b34 = B(3,4);

    _ComplexD c3126 = C(3,1,2,6), c1234 = C(1,2,3,4), c4231 = C(4,2,3,1), 
      c4132 = C(4,1,3,2), c4123 = C(4,1,2,3);

    _ComplexD Fcc = (a13*c3126*c3126/(a12*a23*b56*t123*c1234)  
		     + b12*b12*b12*a45*a45/(b23*b13*a56*t123*c4231)
		     )*Ls_1(-s12, -t123, -s23, -t123)

      + (a13*c3126*c3126/(a12*a23*b56*t123*c1234)  
	 + b12*b12*a45*a45*c4132/(b23*a56*t123*c4231*c4123)
	 )*tLs_1_2mh(s34, t123, s56, s12)

      + 0.5*b12*(pow(c4123*a35 + C(4,1,2,4)*a45, 2) 
		 - s12*s34*a45*a45)/(a12*b34*a56*c4231*c4123)
      *I3_3m(s12, s34, s56)

      - 2.0*a13*c3126/(a12*b56*c1234) 
      *(C(1,2,3,6)*b12/t123*L0(-s23, -t123)/t123
	+ A3(3,4,6)/a23*L0(-s56, -t123)/t123);

    return Fcc;
  }

  std::complex<double> 
  ampq2g2l2::FAsc1ppmm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    _ComplexD a12  = A(1,2), b56  = B(5,6), b62  = B(6,2), a346 = A3(3,4,6); 
    double t123  = S3(1,2,3), s23 = S(2,3); 
    
    _ComplexD Fsc =  - 0.5*A(1,3)/(a12*A(2,3)*b56*t123*C(1,2,3,4))
      *(pow(A(3,2)*B(2,1)*C(1,2,3,6), 2)*L1(-t123, -s23)/(s23*s23)  
	+ a346*a346*L1(-S(5,6), -t123))
      
      + 0.5*b62*b62/(a12*B(2,3)*B(3,4)*b56);
    
    return Fsc;
  }

  std::complex<double> 
  ampq2g2l2::Atree1pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s23 = S(2,3), s56 = S(5,6); 
    
    _ComplexD b13 = B(1,3), a45 = A(4,5), b12 = B(1,2), a24 = A(2,4),
      b16 = B(1,6), a34 = A(3,4); 
    
    _ComplexD Atree = _ComplexD(0.0, 1.0)
      *( - b13*b13*a45*C(2,1,3,6)/(b12*s23*S3(1,2,3)*s56)
	 + a24*a24*b16*C(5,2,4,3)/(a34*s23*S3(2,3,4)*s56)
	 + b13*a24*b16*a45/(b12*a34*s23*s56));
    
    return Atree;
  }

  std::complex<double> 
  ampq2g2l2::FAcc1pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s12 = S(1,2), s23 = S(2,3), s34 = S(3,4), s56 = S(5,6),
      s14 = S(1,4), s24 = S(2,4), d34 = D34, d56 = D56, t123 = S3(1,2,3),
      t234 = S3(2,3,4);
    
    _ComplexD b13 = B(1,3), a45 = A(4,5), b12 = B(1,2), b23 = B(2,3), 
      a56 = A(5,6), a12 = A(1,2), a23 = A(2,3), b56 = B(5,6), a13 = A(1,3),
      b46 = B(4,6), b36 = B(3,6), a34 = A(3,4), a15 = A(1,5), b34 = B(3,4),
      b16 = B(1,6); 
    
    _ComplexD a143 = A3(1,4,3), a524 = A3(5,2,4), a146 = A3(1,4,6), 
      a234 = A3(2,3,4), a246 = A3(2,4,6), a216 = A3(2,1,6), a213 = A3(2,1,3),
      a546 = A3(5,4,6);
    
    _ComplexD c4231 = C(4,2,3,1), c3126 = C(3,1,2,6), c1234 = C(1,2,3,4), 
      c1236 = C(1,2,3,6), c2134 = C(2,1,3,4), c3124 = C(3,1,2,4), 
      c1342 = C(1,3,4,2), c4136 = C(4,1,3,6), c5236 = C(5,2,3,6), 
      c2136 = C(2,1,3,6), a5614 = A4(5,6,1,4);
    
    _ComplexD Fcc = (b13*b13*b13*a45*a45/(b12*b23*a56*t123*c4231)  
		     + a12*a12*a12*c3126*c3126/(a23*b56*a13*a13*a13*t123*c1234)
		     - a12*a23*c1236*c1236/(b56*a13*a13*a13*t123*c1234)
		     )*Ls_1(-s12, -t123, -s23, -t123)

      + (b13*b13*b13*a45*a45/(b12*b23*a56*t123*c4231)
	 + c3126*c3126*c2134*c2134*c2134/(a23*b56*t123*c1234*c3124*c3124*c3124)
	 - a23*b46*b46*t123*c2134/(b56*c1234*c3124*c3124*c3124)
	 )*Ls_1_2mh(s34, t123, s12, s56)
    
      + (- 2.0*a213*a546*c2134/(t123*c3124*c1234)
	 - 0.5*(t123*d34 + 2.0*s12*s56)/(t123*t123)
	 *(b13*b13*b13*a45*a45/(b12*b23*a56*c4231)
	   + c2136*c2136*c2134/(a23*b56*c3124*c1234))
	 + 0.5/(c1342*c3124*c1234)
	 *(b36*a246*c2134*c1342/b56
	   - a216*a246*(s14 + s24 + s34)*c1342/(a34*b56)
	   - a146*a234*a5614/a34
	   + a15*a234*(b36*t234 - b34*c4136) - a216*a143*a524
	   - 0.5*s14*a45*b16*d56*c1234/(b12*a34)
	   + 0.5*(s14 - s23)*a12*b34*c5236)
	 )*I3_3m(s12, s34, s56)
      
      - 2.0*a213*c2136/(b56*a13*t123)
      *(c3126/c3124*L0(-t123, -s12)/s12
	+ c1236/c1234*L0(-t123, -s23)/s23)
      
      - 2.0*a246*c2136*c2134/(a23*b56*c3124*c1234)*L0(-t123, -s56)/s56 
      
      + M1(p1, p2, p3, p4, p5, p6);
    
    return Fcc;
  }

  std::complex<double> 
  ampq2g2l2::FAsc1pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double g3 = G3, d12 = D12, d56 = D56, d34 = D34, s12 = S(1,2), 
      s23 = S(2,3), s34 = S(3,4), s56 = S(5,6), t123 = S3(1,2,3),
      t124 = S3(1,2,4);
    
    _ComplexD a12 = A(1,2), a23 = A(2,3), b13 = B(1,3), b56 = B(5,6), 
      a13 = A(1,3), b46 = B(4,6), b34 = B(3,4), a56 = A(5,6), a24 = A(2,4),
      b36 = B(3,6), b14 = B(1,4), a34 = A(3,4), b64 = B(6,4), a35 = A(3,5), 
      b12 = B(1,2), b43 = B(4,3), b23 = B(2,3); 
    
    _ComplexD a356 = A3(3,5,6), a346 = A3(3,4,6), a213 = A3(2,1,3), 
      a243 = A3(2,4,3), a241 = A3(2,4,1), a246 = A3(2,4,6), a564 = A3(5,6,4),
      a231 = A3(2,3,1), a534 = A3(5,3,4);
    
    _ComplexD c1236 = C(1,2,3,6), c1234 = C(1,2,3,4), c2134 = C(2,1,3,4), 
      c3124 = C(3,1,2,4), c2341 = C(2,3,4,1), c4123 = C(4,1,2,3), 
      c3126 = C(3,1,2,6), c4231 = C(4,2,3,1), b6531 = B4(6,5,3,1),
      a3465 = A4(3,4,6,5), a2132 = A4(2,1,3,2);
  
    _ComplexD Fsc = a12*a23*b13*b13*c1236*c1236/(b56*a13*t123*c1234) 
      *(Ls1(-s12, -t123, -s23, -t123)/(t123*t123)
	- 0.5*L1(-t123, -s23)/(s23*s23))
      
      + a23*b46*b46*t123*c2134/(b56*c1234*c3124*c3124*c3124)
      *Ls_1_2mh(s34, t123, s12, s56)
      
      + a12*b46/(c1234*g3)
      *(3.0*b34*a56*c2341*(a356*d56 - a346*d34)*c4123/(c3124*g3)
	+ (3.0*a564*a231 - a534*c2341)*c4123/c3124 - b13*a24*b36*a56
	+ b14*a23*a564*(t123 - t124)*c4123/(c3124*c3124)
	)*I3_3m(s12, s34, s56)
      
      + a24*b46*b46*c2134*t123/(b56*c1234*c3124)
      *(- 0.5*a24/a23*L1(-s56, -t123)/(t123*t123) 
	+ L0(-s56, -t123)/(t123*c3124))
      + a2132*b46*b46*t123/(b56*c1234*c3124*c3124)*L0(-t123, -s12)/s12 
      + 0.5*a213*a213*c3126*c3126/(b56*a13*t123*c3124)
      *L1(-t123, -s12)/(s12*s12)
      + a12*b46/c1234
      *(3.0*(a534*d34 - a564*d56)*c2341*c4123/(c3124*g3*g3)
	+ 0.5/(a34*b56*c3124*g3)*(- a24*d12*(b6531 + b64*c4231)
				  + c2341*c4123*(a346 - a356)
				  - c2341*a346*d34*(t123 - t124)/c3124)
	+ 0.5*b46*c2341/(b56*c3124*c3124)
	)*(Log(-s12) - Log(-s56))
      
      + b46/(c1234*c3124)
      *(- 3.0*a12*b34*c2341*c4123*(a35*d12 - 2.0*a3465)/(g3*g3)
	- 0.5/(b12*b56*g3)*(c2341*c4123*(b43*c3126 + b46*(d56 - 2*s12))
			    - d34*a243*(b6531 + b64*c4231) 
			    - 2.0*b46*t123*(2.0*(a231 - a241)*c4123
					    + (t123 - t124)
					    *(b13*a24 + b14*a23*c4123/c3124)))
	- 0.5*b13*a246/(b12*b56)
	)*(Log(-s34) - Log(-s56))
      
      + 0.5*b46*c2341*c4123*(a356*d56 - a346*d34)/(b12*a34*b56*c1234*c3124*g3)
      - 0.5*a246*(b6531 + b64*c4231)/(b12*a34*b56*c1234*c3124)
      - 0.5*b13*b13*c1236*c1236/(b12*b23*b56*a13*t123*c1234); 
    
    return Fsc;
  }

  std::complex<double> 
  ampq2g2l2::Atree2ppmp(int p1, int p2, int p3, int p4, int p5, int p6) const {
    return _ComplexD(0.0,1.0)*A(1,3)*A(3,5)
      *A(3,5)/(A(1,2)*A(2,3)*A(3,4)*A(4,1)*A(5,6));
  }

  std::complex<double> 
  ampq2g2l2::Fcc2ppmp(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s23 = S(2,3), s34 = S(3,4), s12 = S(1,2), s14 = S(1,4), 
      s56 = S(5,6), t124 = S3(1,2,4), t123 = S3(1,2,3), t234 = S3(2,3,4);
    
    _ComplexD a35 = A(3,5), a23 = A(2,3), a45 = A(4,5), a34 = A(3,4), 
      a52 = A(5,2), a12 = A(1,2), a56 = A(5,6), a24 = A(2,4), a13 = A(1,3),
      a41 = A(4,1), a51 = A(5,1), a53 = A(5,3);
    
    _ComplexD Fcc = a35*(a23*a45 + a34*a52)/(a12*a34*a56*a24*a24)
      *Ls_1(-s23, -t234, -s34, -t234)
      - a13*a35*a35/(a12*a23*a34*a41*a56)*Ls_1(-s12, -t123, -s23, -t123)
      + a13*a35*(a13*a45 + a34*a51)/(a12*a23*a34*a41*a41*a56)
      *Ls_1_2me(t123, t234, s23, s56)
      - a13*a35*a35/(a12*a23*a34*a41*a56)*Ls_1_2me(t124, t123, s12, s56)
      - a35*a35/(a23*a41*a56*a24)*Ls_1(-s14, -t124, -s12, -t124)
      - 2.0*a35*A3(5,4,2)/(a41*a56*a24)*L0(-t234, -s23)/s23
      - 2.0*a35*A3(5,2,4)/(a12*a56*a24)*L0(-t234, -s34)/s34 
      + 2.0*a13*a51*a53*C(3,2,4,1)/(a12*a23*a34*a41*a56)*L0(-t234, -s56)/s56;
  
    return Fcc;
  }

  std::complex<double> 
  ampq2g2l2::Fsc2ppmp(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s23 = S(2,3), s34 = S(3,4), s56 = S(5,6), t234 = S3(2,3,4),
      t123 = S3(1,2,3), t124 = S3(1,2,4);
    
    _ComplexD a34 = A(3,4), a52 = A(5,2), b24 = B(2,4), a12 = A(1,2), 
      a56 = A(5,6), a24 = A(2,4), a13 = A(1,3), a51 = A(5,1), a23 = A(2,3),
      a41 = A(4,1), a53 = A(5,3), b12 = B(1,2), a54 = A(5,4), b64 = B(6,4),
      b61 = B(6,1), b42 = B(4,2), a14 = A(1,4), a43 = A(4,3), b56 = B(5,6),
      a35 = A(3,5);
    
    _ComplexD Fsc = a34*a52*a52*b24*b24/(a12*a56*a24)
      *Ls1(-s23, -t234, -s34, -t234)/(t234*t234)
      - a13*a34*a51*a51/(a12*a23*a56*a41*a41*a41)
      *Ls_1_2me(t123, t234, s23, s56)
      - 0.5*a13*a53*a53/(a12*a23*a34*a41*a56)*(Log(-t234) - Log(-s56))
      - a13*a51*a51*b12/(a12*a56*a41*a41)*L0(-t123, -s23)/s23
      + a34*a51*a51*b24/(a12*a56*a41*a41)*L0(-t234, -s23)/s23
      + (- a13*a51*a54*C(3,1,2,4)/(a12*a23*a56*a41*a41)
	 + a13*b64*a53/(a12*a23*a41))*L0(-t123, -s56)/s56
      + (a13*a51*a51*C(3,2,4,1)/(a12*a23*a56*a41*a41)
	 - a13*a13*a53*b61/(a12*a23*a34*a41))*L0(-t234, -s56)/s56
      - 0.5*a23*a54*b42*a54*b42/(a14*a56*a24)*L1(-s23, -t234)/(t234*t234)
      - 0.5*a52*b24*a52*b24*a43/(a12*a56*a24)*L1(-s34, -t234)/(t234*t234)
      - a13*a34*a56*b64*b64/(a12*a23*a41)*L1(-t123, -s56)/(s56*s56)
      - 0.5*a13*a13*a13*a56*b61*b61/(a12*a23*a34*a41)*L1(-t234, -s56)/(s56*s56)
      + 0.5*b24*C(1,2,4,6)*C(3,2,4,6)/(a12*a41*b56*t124*t234)
      + 0.5*a24*b24*b24*a51*a53/(a12*a41*a56*t124*t234)
      + 0.5*a13*a35*a35/(a12*a23*a34*a41*a56);
    
    return Fsc;
  }
  
  std::complex<double> 
  ampq2g2l2::Atree2ppmm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    _ComplexD a12 = A(1,2), a23 = A(2,3), b34 = B(3,4), b41 = B(4,1);
    
    _ComplexD Atree = _ComplexD(0.0,1.0)
      *(- C(3,1,2,6)*C(5,3,4,1)/(a12*a23*b34*b41)
	+ B(1,2)*A(5,3)*C(4,1,2,6)/(a12*b41*S3(1,2,4))
	+ A(3,4)*B(6,1)*C(5,3,4,2)/(a23*b34*S3(2,3,4)))/S(5,6);
    
    return Atree;
  }

  std::complex<double> 
  ampq2g2l2::Fcc2ppmm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s34 = S(3,4), s12 = S(1,2), s56 = S(5,6), s14 = S(1,4),
      s23 = S(2,3), t234 = S3(2,3,4), t124 = S3(1,2,4), t123 = S3(1,2,3);
    
    _ComplexD a13 = A(1,3), a12 = A(1,2), a23 = A(2,3), b56 = B(5,6), 
      b34 = B(3,4), a56 = A(5,6), a34 = A(3,4), b16 = B(1,6), b46 = B(4,6),
      b12 = B(1,2), a35 = A(3,5), b14 = B(1,4), a24 = A(2,4), b36 = B(3,6),
      a14 = A(1,4);
    
    _ComplexD c3126 = C(3,1,2,6), c1234 = C(1,2,3,4), c3124 = C(3,1,2,4),
      c5342 = C(5,3,4,2), c2341 = C(2,3,4,1), c1236 = C(1,2,3,6), 
      c2146 = C(2,1,4,6), c4123 = C(4,1,2,3), c2143 = C(2,1,4,3),
      c4126 = C(4,1,2,6), c1342 = C(1,3,4,2);
    
    swap();
    _ComplexD temp = M1(p3, p2, p4, p1, p6, p5);
    swap();
    
    _ComplexD Fcc = a13*c3126*c3126/(a12*a23*b56*c1234*c3124)
      *Ls_1_2mh(s34, t123, s12, s56)
      
      + (c5342*c5342/(b34*a56*t234*c1234)
	 - a34*b16*a34*b16/(a23*b56*t234*c2341))*Ls_1_2mh(s12, t234, s34, s56)
      
      + (a13*a13*a13*b46*t123*b46*t123/(a12*a23*b56*c1234*c1234*c1234*c3124)
	 - a13*c1236*c1236*c3124/(a12*a23*b56*c1234*c1234*c1234)) 
      *Ls_1_2mh(s14, t123, s23, s56)

      - (c2146*c4123*c2146*c4123/(a12*b56*t124*c2143*c2143*c2143)
	 + b12*a35*b12*a35/(b14*a56*t124*c3124)
	 - a24*b36*a24*b36*t124/(a12*b56*c2143*c2143*c2143)) 
      *Ls_1_2mh(s23, t124, s14, s56)

      + a13*c3126*c3126/(a12*a23*b56*c1234*c3124)
      *Ls_1(-s12, -t123, -s23, -t123)
      + c5342*c5342/(b34*a56*c1234)*Ls_1(-s23, -t234, -s34, -t234)/t234
      - b12*a35*b12*a35/(a56*b14*c3124)*Ls_1(-s14, -t124, -s12, -t124)/t124

      + T2ppmm(p1, p2, p3, p4, p5, p6)*I3_3m(s12, s34, s56)
      + TT2ppmm(p1, p2, p3, p4, p5, p6)*I3_3m(s14, s23, s56)
      - M1(p1, p4, p2, p3, p5, p6) - temp

      - 2.0*b12*a14*c2146*c4126/(a12*b56*t124*c2143)*L0(-t124, -s14)/s14
      + 2.0*b16*c1342*c5342/(b34*t234*c1234)*L0(-t234, -s56)/s56
      + 2.0*A3(5,4,2)*c5342/(b34*a56*c1234)*L0(-t234, -s23)/s23
      + 2.0*A3(4,3,6)*c4126/(a12*b56*c2143)*L0(-t124, -s56)/s56
      - 2.0*c5342*c5342/(b34*a56*t234*c1234)*(Log(-s23) - Log(-s56));
    
    return Fcc;
  }

  std::complex<double> 
  ampq2g2l2::T2ppmm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    _ComplexD a34 = A(3,4), b16 = B(1,6), a23 = A(2,3), c5342 = C(5,3,4,2); 
    double t234 = S3(2,3,4); 
    
    return 2.0*a34*a34*c5342*b16/(a23*t234*t234)
      + A(1,3)/(a23*S3(1,2,3)*t234)*(C(4,2,3,1)*c5342*C(3,1,2,6)/C(1,2,3,4)
				    - B(1,2)*a34*A(4,5)*b16);
  }

  std::complex<double> 
  ampq2g2l2::TT2ppmm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double dt23 = Dt23, s13 = S(1,3), s24 = S(2,4), s14 = S(1,4),
      s56 = S(5,6), t124 = S3(1,2,4), t123 = S3(1,2,3); 
    
    _ComplexD a12 = A(1,2), b56 = B(5,6), b12 = B(1,2), a35 = A(3,5), 
      b14 = B(1,4), a56 = A(5,6), a45 = A(4,5), a13 = A(1,3), b26 = B(2,6),
      a34 = A(3,4), b16 = B(1,6);
    
    _ComplexD a546 = A3(5,4,6), a536 = A3(5,3,6), a312 = A3(3,1,2), 
      c2143 = C(2,1,4,3), c3124 = C(3,1,2,4), c3126 = C(3,1,2,6),
      c4126 = C(4,1,2,6); 
    
    _ComplexD TT = 0.5*(t124*dt23 + 2.0*s14*s56)/(t124*t124)
      *(c4126*c4126/(a12*b56*c2143) + b12*a35*b12*a35/(b14*a56*c3124))
      
      - 2.0*A4(4,1,2,4)*a536/(a12*t124*c2143)
      - a312*a45*c3126/(a12*t123*c3124)
      
      + 1.0/(c2143*c3124)
      *(A4(4,1,2,3)*a536/a12 
	+ a312*a546/(a12*C(1,2,3,4))*(a12*(s13 - s24) + a13*C(2,1,4,3)) 
	- 0.5*c4126/(a12*b56)*(c3126*dt23 + 2.0*A3(3,1,6)*s56)
	- 0.5*b12*a35*C(5,3,4,1)*dt23/(b14*a56)
	+ b26*(A3(4,2,1)*a35 + A3(3,4,1)*a45) - a34*b16*C(5,1,3,2));

    return TT;
  }

  std::complex<double> 
  ampq2g2l2::Fsc2ppmm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s56 = S(5,6), s23 = S(2,3), s13 = S(1,3), s34 = S(3,4),
      t234 = S3(2,3,4), t124 = S3(1,2,4);
    
    _ComplexD a13 = A(1,3), a23 = A(2,3), a14 = A(1,4), a24 = A(2,4), 
      b34 = B(3,4), a56 = A(5,6), b16 = B(1,6), b23 = B(2,3), a34 = A(3,4),
      b12 = B(1,2), b14 = B(1,4), a15 = A(1,5), a35 = A(3,5), b13 = B(1,3),
      a45 = A(4,5), a12 = A(1,2), b56 = B(5,6), b36 = B(3,6), b46 = B(4,6),
      b26 = B(2,6);
    
    _ComplexD a512 = A3(5,1,2), a542 = A3(5,4,2), a431 = A3(4,3,1), 
      a346 = A3(3,4,6), a316 = A3(3,1,6);
    
    _ComplexD c1342 = C(1,3,4,2), c1234 = C(1,2,3,4), c5342 = C(5,3,4,2), 
      c5234 = C(5,2,3,4), c2143 = C(2,1,4,3), c5341 = C(5,3,4,1),
      c1236 = C(1,2,3,6), c4126 = C(4,1,2,6);
    
    swap();
    _ComplexD m2 = M2(p3, p2, p1, p4, p6, p5);
    _ComplexD m3 = M3(p3, p2, p1, p4, p6, p5);
    swap();
    
    _ComplexD Fsc = a13/a23*m2 + a14/a24*m3
      + 0.5*a512/(b34*c1234)*(c5342/a56*L0(-t234, -s56)/s56
			      + b16*c1342*L1(-s56, -t234)/(t234*t234))
      + 0.5*b23*a34*c5234/(b34*a56*c1234)
      *(c5342/t234*L0(-t234, -s23)/s23 
	+ a542*L1(-t234, -s23)/(s23*s23))
      - 0.5*b12/(b14*c1234*c2143)
      *(c5341*a15/a56 - b46*c4126/b56)*(Log(-s23) - Log(-s56))
      
      + 0.5*(- b12*a15*a35/(a23*b34*a56*c1234)
	     - b13*a35*b13*a35/(b14*a23*b34*a56*c2143)
	     + a431*a15*a35/(a23*a56*c1234*c2143)
	     - a13*a35*a45/(a12*a23*a56*c1234)
	     - s34*a15*a45/(a12*a56*c1234*c2143)
	     - b12*a15*c5342/(b34*a56*t234*c1234)
	     - a13*b16*b16/(b14*a12*a23*b34*b56)
	     + a346*c1236/(a12*a23*b34*b56*c1234)
	     - s13*a346*b36/(a23*b34*b56*c1234*c2143)
	     + a14*a346*b36/(a12*b56*c1234*c2143)
	     + a316*b12*b46/(b14*a23*b34*b56*c1234)
	     - c4126*b26*a24/(a12*b56*t124*c2143));
    
    return Fsc;
  }
  
  std::complex<double> 
  ampq2g2l2::Atree3pmpp(int p1, int p2, int p3, int p4, int p5, int p6) const {
    return _ComplexD(0, 1)*A(2,5)*A(2,5)/(A(2,3)*A(3,4)*A(4,1)*A(5,6));
  }
  
  std::complex<double> 
  ampq2g2l2::Fcc3pmpp(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s23 = S(2,3), s56 = S(5,6), s12 = S(1,2), s14 = S(1,4),
      t123 = S3(1,2,3), t234 = S3(2,3,4), t124 = S3(1,2,4), t134 = S3(1,3,4);
    
    _ComplexD a25 = A(2,5), a12 = A(1,2), a45 = A(4,5), a24 = A(2,4),
      a15 = A(1,5), a23 = A(2,3), a34 = A(3,4), a41 = A(4,1), a56 = A(5,6),
      a35 = A(3,5), a13 = A(1,3), a52 = A(5,2);
    
    _ComplexD Fcc = a25*(a12*a45 - a24*a15)/(a23*a34*a41*a41*a56)
      *Ls_1_2me(t123, t234, s23, s56)
      + a25*(a23*a15 - a12*a35)/(a23*a34*a41*a13*a56)
      *Ls_1(-s12, -t123, -s23, -t123)
      - a25*(a23*a45 + a24*a35)/(a23*a34*a34*a41*a56)
      *Ls_1_2me(t124, t123, s12, s56)
      - a52*a52/(a23*a34*a41*a56)*(Ls_1(-s14, -t124, -s12, -t124)
				   + Ls_1_2me(t134, t124, s14, s56))
      - 2.0*a52*A3(5,4,3)/(a34*a41*a56)*L0(-t234, -s23)/s23
      + 2.0*a25*a15*C(2,3,4,1)/(a23*a34*a41*a56)*L0(-t234, -s56)/s56;
    
    return Fcc;
  }

  std::complex<double> 
  ampq2g2l2::Fsc3pmpp(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s23 = S(2,3), s12 = S(1,2), s56 = S(5,6), t123 = S3(1,2,3),
      t234 = S3(2,3,4), t124 = S3(1,2,4), t134 = S3(1,3,4);
    
    _ComplexD a24 = A(2,4), a51 = A(5,1), a23 = A(2,3), a34 = A(3,4), 
      a41 = A(4,1), a56 = A(5,6), a13 = A(1,3), a54 = A(5,4), a52 = A(5,2),
      a32 = A(3,2), a35 = A(3,5), a12 = A(1,2), a15 = A(1,5), b36 = B(3,6), 
      b34 = B(3,4), b56 = B(5,6), a25 = A(2,5);
    
    _ComplexD a543 = A3(5,4,3), a216 = A3(2,1,6), a536 = A3(5,3,6), 
      a546 = A3(5,4,6), a246 = A3(2,4,6), a513 = A3(5,1,3);
    
    _ComplexD c4136 = C(4,1,3,6), c2346 = C(2,3,4,6), c5231 = C(5,2,3,1),
      c2134 = C(2,1,3,4), c5124 = C(5,1,2,4), c2341 = C(2,3,4,1),
      c5123 = C(5,1,2,3);
    
    _ComplexD Fsc = - a24*a51*a24*a51/(a23*a34*a41*a41*a41*a56)
      *Ls_1_2me(t123, t234, s23, s56)
      - a23*a51*a51/(a34*a41*a13*a13*a56)*Ls_1(-s12, -t123, -s23, -t123)
      - a23*a54*a54/(a34*a34*a34*a41*a56)*Ls_1_2me(t124, t123, s12, s56)
      + (a41*a52 - a24*a51)*a543/(a34*a41*a41*a56)*L0(-t234, -s23)/s23
      - 0.5*a543*a543*a32/(a34*a41*a56)*L1(-s23, -t234)/(t234*t234)
      - 0.5*a52*a52/(a23*a34*a41*a56)*(Log(-t234) - Log(-s56))
      + (a24*a51*a51*c2341/(a23*a34*a41*a41*a56)
	 - a52*a216/(a23*a34*a41))*L0(-t234, -s56)/s56
      - 0.5*a56*a216*a216/(a23*a34*a41)*L1(-t234, -s56)/(s56*s56)
      + a23*c5123*a35/(a34*a34*a13*a56)*L0(-t123, -s12)/s12
      - a12*a12*c5231*a15/(a23*a41*a41*a13*a56)*L0(-t123, -s23)/s23
      + (a24*a546/(a34*a34*a41) 
	 - (2.0*a41*a52 + a51*a24)*a246/(a23*a34*a41*a41)
	 + a52*a54*c2134/(a23*a34*a41*a56))*L0(-t123, -s56)/s56
      - a52*a52/(a23*a34*a41*a56)*(Log(-t123) - Log(-s56))
      - a56*a246*a246/(a23*a34*a41)*L1(-t123, -s56)/(s56*s56)
      - a24*a54*c5124/(a34*a34*a41*a56)*L0(-t124, -s12)/s12
      - a24*a536/(a34*a34*a41)*L0(-t124, -s56)/s56
      - a23*b36*b36*a56/(a34*a41)*L1(-t124, -s56)/(s56*s56)
      + a51*a52/(a41*a13*a56)*((Log(-s12) - Log(-s56))/a34
			       - a12/(a23*a41)*(Log(-s23) - Log(-s56)))
      + 0.5*(b34*c4136*c2346/(a34*a41*t234*t134*b56)
	     + b34*a52*a513/(a41*t234*t134*a56)
	     + a52*a543/(a34*a41*t234*a56)
	     + a25*a25/(a23*a34*a41*a56));
    
    return Fsc;
  }

  std::complex<double> 
  ampq2g2l2::Atree3pmmp(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s34 = S(3,4), s56 = S(5,6); 
    
    _ComplexD c3146 = C(3,1,4,6), c5234 = C(5,2,3,4), 
      a41 = A(4,1), b23 = B(2,3); 
    
    _ComplexD Atree = _ComplexD(0.0, 1.0)
      *(B(4,1)*A(1,3)*A(5,2)*c3146/(a41*s34*S3(1,3,4)*s56)
	+ A(2,3)*B(2,4)*B(6,1)*c5234/(b23*s34*S3(2,3,4)*s56)
	- c5234*c3146/(b23*a41*s34*s56));
    
    return Atree;
  }
  
  std::complex<double> 
  ampq2g2l2::FBcc3pmmp(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double d12 = D12, s23 = S(2,3), s13 = S(1,3), s34 = S(3,4), s56 = S(5,6),
      s12 = S(1,2), s14 = S(1,4), t123 = S3(1,2,3), t234 = S3(2,3,4); 
    
    _ComplexD b23 = B(2,3), a56 = A(5,6), b24 = B(2,4), a15 = A(1,5), 
      b34 = B(3,4), a23 = A(2,3), b16 = B(1,6), a34 = A(3,4), b56 = B(5,6),
      b13 = B(1,3), a45 = A(4,5), a24 = A(2,4), b14 = B(1,4), a21 = A(2,1), 
      a25 = A(2,5), a14 = A(1,4), b46 = B(4,6), b12 = B(1,2), a35 = A(3,5),
      a51 = A(5,1), b26 = B(2,6);
    
    _ComplexD a324 = A3(3,2,4), a516 = A3(5,1,6), a321 = A3(3,2,1),
      a312 = A3(3,1,2), a356 = A3(3,5,6), a316 = A3(3,1,6), a524 = A3(5,2,4),
      a542 = A3(5,4,2), a326 = A3(3,2,6), a534 = A3(5,3,4), a346 = A3(3,4,6),
      a512 = A3(5,1,2), a546 = A3(5,4,6), a416 = A3(4,1,6), a536 = A3(5,3,6),
      a341 = A3(3,4,1), a541 = A3(5,4,1), a526 = A3(5,2,6), a531 = A3(5,3,1);
    
    _ComplexD c5231 = C(5,2,3,1), c4123 = C(4,1,2,3), c4231 = C(4,2,3,1),
      c1342 = C(1,3,4,2), c1234 = C(1,2,3,4), c5342 = C(5,3,4,2), 
      c3241 = C(3,2,4,1), c2341 = C(2,3,4,1), c5123 = C(5,1,2,3),
      c5234 = C(5,2,3,4), c2143 = C(2,1,4,3), c3146 = C(3,1,4,6),
      c3142 = C(3,1,4,2), c1346 = C(1,3,4,6), c3126 = C(3,1,2,6),
      c3124 = C(3,1,2,4), c5341 = C(5,3,4,1), a5231 = A4(5,2,3,1); 
    
    _ComplexD Fcc = c5231*c5231/(b23*a56*c4123*c4231)
      *(tLs_1_2mh(s14, t123, s23, s56) + Ls_1(-s12, -t123, -s23, -t123)) 
      + (b24*b24*b24*a15*a15*t234/(b23*b34*a56*c1342*c1342*c1342)
	 - b24*c1234*c1234*c5342*c5342/(b23*b34*a56*t234*c1342*c1342*c1342)
	 - a23*a23*b16*b16*c3241/(a34*b56*t234*c2341*c4231)
	 )*Ls_1_2mh(s12, t234, s34, s56)
      
      + (b13*b13*a45*a45*t123*t123/(b23*a56*c4123*c4123*c4123*c4231) 
	 - c4231*c5123*c5123/(b23*a56*c4123*c4123*c4123)) 
      *Ls_1_2mh(s34, t123, s12, s56)
      - a23*b16*a23*b16/(b56*t234*a24*c4231)*Ls_1(-s23, -t234, -s34, -t234)
      - 0.5*b14*(pow(a21*c5231 + a24*c5234, 2)
		 - a25*a25*s14*s23)/(a14*b23*a56*c2143*c2341)
      *I3_3m(s14, s23, s56)
      
      + (0.5*b24*c5234*c5234*(2*s34*s56 
			      + d12*t234)/(b23*b34*a56*t234*t234*c1342)
	 + a23*b16*c3241*c5234/(t234*t234*c4231)
	 + 0.5*a23*b16*c3146*c3241/(a34*b56*t234*c4231)
	 + 0.5*b14*a25*b16*a324/(b34*t234*c4231)
	 + 2.0*a23*b24*b24*a516/(b23*t234*c1342)
	 - a321*c5231*b46/(b23*t123*c4231)
	 + 0.5/(c1342*c4231)
	 *(b14*a316*a524/b34 + b14*a542*c5234*d12/(b23*b34*a56) 
	   - a23*b16/(a34*b56)*(a326*c3142 + a312*a356)
	   + 2.0*b12*a356*c5234/b23 
	   + b24*b16/(b23*b34)*(a524*(s56 - t123) + a534*(s56 + t234))
	   + b14*a35*(2.0*a346 + a326))
	 + 0.5/(c1342*c4123*c4231)
	 *(A5(4,1,2,3,4)/b23*((a512 - a542)*b16 - 2.0*b12*a546)
	   + c2341*b24*(a35*a416 + a45*a326)
	   + a536*(a321*s13 + a341*s12) 
	   + b13*(a316 - a326)*c3124*a45  
	   + c5341*a346*s23 
	   + a541*c3126*s13 
	   + (3.0*a321 + a341)*a526*s14 
	   - a531*c1346*(a321 - a341)
	   + 2.0*a341*b16*(a51*(s12 + t123) - a5231)
	   - a321*a546*s34 
	   + 4.0*A5(5,1,2,3,1)*a346 
	   - a23*c4231*(2.0*(a524 - a534)*b26 - a516*b24))
	 )*I3_3m(s12, s34, s56)
    
      + 2.0*a23*b24*c5234*c5342/(b23*a56*t234*c1342)*L0(-t234, -s34)/s34
      - 2.0*b14*b24*a15*c5234/(b23*b34*a56*c1342)*L0(-t234, -s56)/s56;

    return Fcc;
  }

  std::complex<double> 
  ampq2g2l2::FBsc3pmmp(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    _ComplexD a45 = A(4,5), a56 = A(5,6), a35 = A(3,5), a34 = A(3,4),
      c5234 = C(5,2,3,4), c1342 = C(1,3,4,2), c4123 = C(4,1,2,3); 
    
    _ComplexD Fsc = M2(p1, p2, p3, p4, p5, p6) + M3(p1, p2, p3, p4, p5, p6) 
      + 0.5*a45*C(3,1,2,4)*c5234/(S(3,4)*a56*c1342*c4123)
      *(Log(-S(1,2)) - Log(-S(5,6)))
      
      - 0.5*a35*(A(2,3)*a45 - A(2,5)*a34)/(A(1,4)*a34*a56*c4123)
      + 0.5*B(2,4)*a35/(B(2,3)*a56*c1342)*(a35/a34 + c5234/S3(2,3,4));
    
    return Fsc;
  }
  
  std::complex<double> 
  ampq2g2l2::Atree3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    _ComplexD b13 = B(1,3), a52 = A(5,2), b41 = B(4,1), a24 = A(2,4),
      b61 = B(6,1), a23 = A(2,3); 
    double s34  = S(3,4), s56 = S(5,6); 
    
    _ComplexD Atree = _ComplexD(0.0, -1.0)
      *(b13*b13*a52*C(4,1,3,6)/(b41*s34*S3(1,3,4)*s56)
	- a24*a24*b61*C(5,2,4,3)/(a23*s34*S3(2,3,4)*s56)
	+ b13*a24*b61*a52/(a23*b41*s34*s56));
    
    return Atree;
  }

  std::complex<double> 
  ampq2g2l2::FBcc3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s14 = S(1,4), s23 = S(2,3), s56 = S(5,6), s34 = S(3,4), 
      s12 = S(1,2), t123 = S3(1,2,3), t234 = S3(2,3,4);
    
    _ComplexD a12 = A(1,2), b46 = B(4,6), a23 = A(2,3), b56 = B(5,6), 
      b23 = B(2,3), a15 = A(1,5), b34 = B(3,4), a56 = A(5,6), a24 = A(2,4),
      b16 = B(1,6), a34 = A(3,4), a13 = A(1,3), b24 = B(2,4), a513 = A3(5,1,3),
      a423 = A3(4,2,3);
    
    _ComplexD c1243 = C(1,2,4,3), c1342 = C(1,3,4,2), c5342 = C(5,3,4,2), 
      c2341 = C(2,3,4,1), c5234 = C(5,2,3,4), c5243 = C(5,2,4,3), 
      c1234 = C(1,2,3,4), c3124 = C(3,1,2,4), c1236 = C(1,2,3,6),
      c2134 = C(2,1,3,4), c3126 = C(3,1,2,6);
    
    _ComplexD Fcc = 
      (a12*b46*t123*a12*b46*t123/(a23*b56*c1234*c1234*c1234*c3124) 
       - c1236*c1236*c2134*c2134/(a23*b56*c1234*c1234*c1234*c3124))
      *Ls_1_2mh(s14, t123, s23, s56) 
      
      + (c2134*c3126*c2134*c3126/(a23*b56*c1234*c3124*c3124*c3124)
	 - a23*b46*b46*t123*t123/(b56*c1234*c3124*c3124*c3124)) 
      *Ls_1_2mh(s34, t123, s12, s56)
      
      + (b23*a15*b23*a15*t234*c1243/(b34*a56*c1234*c1342*c1342*c1342)
	 - c1243*c1243*c1243*c5342*c5342/(b34*a56*t234*c1234*c1342*c1342*c1342)
	 - a24*a24*a24*b16*b16/(a23*a34*b56*t234*c2341))
      *Ls_1_2mh(s12, t234, s34, s56)
      
      + (a12*c3126*a12*c3126/(a23*b56*a13*a13*c1234*c3124)
	 - a23*c1236*c1236/(b56*a13*a13*c1234*c3124)) 
      *Ls_1(-s12, -t123, -s23, -t123)

      + (c5234*b23*c5234*b23/(a56*t234*b24*b24*b24*c1234) 
	 - c5342*b34*c5342*b34/(a56*t234*b24*b24*b24*c1234))
      *Ls_1(-s23, -t234, -s34, -t234)
      
      + Tc3pmpm(p1, p2, p3, p4, p5, p6)*I3_3m(s12, s34, s56)
      + TTc3pmpm(p1, p2, p3, p4, p5, p6)*I3_3m(s14, s23, s56)
      
      + 2.0*a513*c1243*c5243/(b34*a56*c1234*c1342)*L0(-t234, -s56)/s56
      + 2.0*a423*c5234*c5243/(a56*t234*b24*c1234)*L0(-t234, -s23)/s23
      + 2.0*a423*c5243*c5342/(a56*t234*b24*c1342)*L0(-t234, -s34)/s34
      + M1(p1, p4, p3, p2, p5, p6);

    return Fcc;
  }

  std::complex<double> 
  ampq2g2l2::Tc3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double d34 = D34, d12 = D12, s34 = S(3,4), s14 = S(1,4), s23 = S(2,3),
      s13 = S(1,3), s24 = S(2,4), s56 = S(5,6), t123 = S3(1,2,3), 
      t234 = S3(2,3,4), t134 = S3(1,3,4);
    
    _ComplexD a24 = A(2,4), b16 = B(1,6), a23 = A(2,3), b13 = B(1,3),
      a25 = A(2,5), b34 = B(3,4), a56 = A(5,6), a34 = A(3,4), b56 = B(5,6),
      a45 = A(4,5), a12 = A(1,2), a42 = A(4,2), b26 = B(2,6), b36 = B(3,6);
    
    _ComplexD a513 = A3(5,1,3), a523 = A3(5,2,3), a213 = A3(2,1,3), 
      a516 = A3(5,1,6), a423 = A3(4,2,3), a416 = A3(4,1,6), a426 = A3(4,2,6),
      a146 = A3(1,4,6), a546 = A3(5,4,6), a543 = A3(5,4,3), a536 = A3(5,3,6), 
      a123 = A3(1,2,3), a526 = A3(5,2,6); 
    
    _ComplexD c4136 = C(4,1,3,6), c5243 = C(5,2,4,3), c2136 = C(2,1,3,6), 
      c1234 = C(1,2,3,4), c1342 = C(1,3,4,2), c1243 = C(1,2,4,3), 
      c3124 = C(3,1,2,4), c1236 = C(1,2,3,6), c5136 = C(5,1,3,6);
    
    _ComplexD T = - a24*a24*b16*c5243/(a23*t234*t234)
      + 0.5*b13*a24*a25*c5243/(a23*b34*a56*t234)
      + 0.5*a24*a24*b16*c4136/(a23*a34*b56*t234)
      - a45*a213*c2136/(a23*t123*c1234)
      + 0.5/(c1234*c1342)
      *( 4.0*a516*a423*c1243/t234
	 + c1243*c5243*c5243*(2.0*s34*s56 + d12*t234)/(b34*a56*t234*t234)
	 + a513*a513*(a12*d12 + c1234*a42)/(a23*b34*a56)
	 + a24*a24*a24*b26*b26*c1234/(a23*a34*b56)
	 - a24*a45*c1234*(a416 - a426)/(a23*a34) 
	 + a12*b36*(a513 - a523)*(s23 + t134)/(a23*b34)
	 - a12*a45/a23*(b36*(2*s24 + d34) - 2.0*B4(3,1,5,6)))

      + 0.5/(c1234*c1342*c3124)
      *( a146*(a513*s13 - a523*s23) + 5.0*A5(1,2,4,1,3)*a546
	 + a543*c1236*(s13 - s24)  
	 + a123*(a526*s34 + a546*s13 + 2.0*A4(2,1,4,3)*c5136/a23
		 + 3.0*(A5(5,4,3,1,6) - a536*s24) 
		 - 2.0*(a516*(s14 + s24) + A5(5,1,4,3,6))));
  
    return T;
  }
  
  std::complex<double> 
  ampq2g2l2::TTc3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    _ComplexD c3124 = C(3,1,2,4);
    
    _ComplexD TT = 1.0/(C(1,2,3,4)*C(3,1,4,2))
      *(0.5*(A3(4,1,3) - A3(4,2,3))*C(5,1,4,6) + A3(5,1,3)*A3(4,2,6)
	+ C(4,1,2,3)/c3124*(A3(5,2,4)*A3(3,1,6) 
			    - A3(3,1,4)*(A3(5,2,6) - A3(5,3,6)))) 
      - B(1,3)*A(4,5)*C(2,1,3,6)/(c3124*S3(1,2,3));
    
    return TT;
  }
  
  std::complex<double> 
  ampq2g2l2::FBsc3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double g3 = G3, gt3 = Gt3, d12 = D12, d56 = D56, dt23 = Dt23, 
      dt14 = Dt14, dt56 = Dt56, s23 = S(2,3), s34 = S(3,4), s12 = S(1,2), 
      s56 = S(5,6), s14 = S(1,4), t234 = S3(2,3,4), t123 = S3(1,2,3), 
      t134 = S3(1,3,4);
    
    _ComplexD b24 = B(2,4), b14 = B(1,4), b23 = B(2,3), a24 = A(2,4), 
      a56 = A(5,6), a23 = A(2,3), b46 = B(4,6), b56 = B(5,6), a15 = A(1,5), 
      b34 = B(3,4), a13 = A(1,3), b13 = B(1,3), a12 = A(1,2), a45 = A(4,5), 
      a14 = A(1,4), b16 = B(1,6), a25 = A(2,5), b36 = B(3,6), a35 = A(3,5),
      a34 = A(3,4), a21 = A(2,1);
    
    _ComplexD c3241 = C(3,2,4,1), c3124 = C(3,1,2,4), c5234 = C(5,2,3,4), 
      c1234 = C(1,2,3,4), c1243 = C(1,2,4,3), c1342 = C(1,3,4,2), 
      c1236 = C(1,2,3,6), c3146 = C(3,1,4,6), c3126 = C(3,1,2,6),
      c5342 = C(5,3,4,2), c3142 = C(3,1,4,2), c2341 = C(2,3,4,1), 
      c2146 = C(2,1,4,6), c2561 = C(2,5,6,1), c5341 = C(5,3,4,1),
      c4123 = C(4,1,2,3), c5243 = C(5,2,4,3); 
    
    _ComplexD Fsc = b24*c3241/(b14*c3124)*M2(p1, p4, p2, p3, p5, p6) 
      - b23*b23*a24*a24*c5234*c5234/(a56*b24*t234*c1234)
      *Ls1(-s23, -t234, -s34, -t234)/(t234*t234)
      + a23*b46*t123*b46*t123/(b56*c1234*c3124*c3124*c3124)
      *Ls_1_2mh(s34, t123, s12, s56)
      - b23*a15*b23*a15*t234*c1243/(b34*a56*c1234*c1342*c1342*c1342)
      *Ls_1_2mh(s12, t234, s34, s56)
      + a23*c1236*a23*c1236/(a23*b56*a13*a13*c1234*c3124)
      *Ls_1(-s12, -t123, -s23, -t123)
      
      + Ts3pmpm(p1, p2, p3, p4, p5, p6)*I3_3m(s12, s34, s56)
      + TTs3pmpm(p1, p2, p3, p4, p5, p6)*I3_3m(s14, s23, s56) 
      
      + b13/(b56*a13*c3124)
      *(a12*c3126*c3126/c3124*L0(-t123, -s12)/s12
	- a23*c1236*c1236/c1234*L0(-t123, -s23)/s23)

      + 0.5*b23*a24*a24/(a56*b24*t234)
      *(b23*c5234*c5234/c1234*L1(-t234, -s23)/(s23*s23)
	- b34*c5342*c5342/c1342*L1(-t234, -s34)/(s34*s34))

      + a24*b46*b46*t123*t123/(b56*c1234*c3124*c3124)*L0(-t123, -s56)/s56
      - b23*b23*a24*a15*a15*t234/(a56*c1234*c1342*c1342)*L0(-t234, -s34)/s34

      + 0.5*b13*b23*a15*a15*t234*c1243/(b34*a56*c1234*c1342)
      *(b13/b23*L1(-s56, -t234)/(t234*t234) - 2.0/c1342*L0(-s56, -t234)/t234)
      
      + 0.5*b13*b46/(c1234*c3142*c3124)
      *(a13*a45 + (c3146*t123 - c3126*t134)/(b14*b56))*(Log(-s23) - Log(-s56))
      
      + (3.0*b23*c2341/(c3124*gt3*gt3)
	 *(a45*(A3(2,3,6)*dt23 - A3(2,5,6)*dt56) 
	   - a14*b16*(a25*dt14 - 2.0*A4(2,3,6,5)))
	 + 0.5/(c3124*gt3)*(( - a25*a45/a56 
			      + b16*c2146/(b14*b56))*(b13*dt23 - b23*c2561)
			    - 2.0*b36*c2341/(b14*b56)*(b16*dt23 
						       - 2.0*B4(1,4,5,6))
			    - 4.0*A3(4,1,3)*b16*a25))*(Log(-s23) - Log(-s56))
      
      - M2a(p1, p2, p4, p3, p5, p6) 
      - M3a(p1, p2, p4, p3, p5, p6) 
      
      - 0.5*a35*c4123*c5243/(s34*a56*c1342*c3124)*(Log(-s12) - Log(-s56))
    
      + 0.5*b46*c4123/(b56*c3124*c1234*g3) 
      *(c3126*(a24*d56 - 2.0*A4(2,1,3,4))/a34 
	+ a12*b46*(b13*d56 - 2.0*B4(1,2,4,3))/b34)
    
      + 0.5*a15*c4123/(a56*c1342*c1234*g3)
      *((A3(5,2,1)*d12 - A3(5,6,1)*d56)*a14/a34 
	- b23*(a25*d56 - 2.0*a21*c5341))
    
      + 0.5*c2341/(c3124*gt3) 
      *(0.5*dt56*a25*b16/(b14*a23) + dt14*a45*a25/(a23*a56) + a45*b36) 
      
      + 0.5/(c3124*c1234)*(- a12*b13*b46*b13*b46/(b14*b34*b56)
			   - a25*a45*C(2,1,3,4)/(a23*a56)
			   + a24*a45*b46/a34)

      - 0.5*a24*a24*c5342*c5234/(a23*a34*a56*t234*b24*c1234)
      + 0.5*a15*a45*c4123/(a34*a56*c1342*c1234);
    
    return Fsc;
  }


  std::complex<double> 
  ampq2g2l2::Ts3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double g3 = G3, d56 = D56, d12 = D12, s12 = S(1,2), s13 = S(1,3),
      s23 = S(2,3), s14 = S(1,4), s24 = S(2,4), t124 = S3(1,2,4),
      t123 = S3(1,2,3);
    
    _ComplexD b46 = B(4,6), a56 = A(5,6), a12 = A(1,2), b56 = B(5,6), 
      b12 = B(1,2), a24 = A(2,4), b36 = B(3,6), a45 = A(4,5), b13 = B(1,3),
      b14 = B(1,4), a35 = A(3,5), a15 = A(1,5), b23 = B(2,3);
    
    _ComplexD a561 = A3(5,6,1), a521 = A3(5,2,1), a256 = A3(2,5,6), 
      a216 = A3(2,1,6), a213 = A3(2,1,3), a546 = A3(5,4,6), a156 = A3(1,5,6),
      a123 = A3(1,2,3), a562 = A3(5,6,2), a512 = A3(5,1,2), a456 = A3(4,5,6), 
      a423 = A3(4,2,3);
    
    _ComplexD c4123 = C(4,1,2,3), c3124 = C(3,1,2,4), c1234 = C(1,2,3,4), 
      c2136 = C(2,1,3,6), c5241 = C(5,2,4,1), c5231 = C(5,2,3,1), 
      c2341 = C(2,3,4,1), c1342 = C(1,3,4,2);
    
    _ComplexD T = 3.0*s12*b46*a56*c4123/(c3124*c1234*g3*g3)
      *(a12*b56*(a561*d56 - a521*d12) + t124*(a256*d56 - a216*d12))
      + a12*b46/(c3124*c1234*g3)
      *( - b12*a56*(3.0*c4123*c2136 - a24*b36*(t123 - t124))
	 + c4123*(a521*d12 - a561*d56 + t123*c5241 - t124*c5231)
	 + a45*t123*(b13*(s13 + s23) + b14*c4123 - B4(1,2,4,3))
	 - c4123*a35*t123*(b13*c3124 + b14*(s14 + s24) - B4(1,2,3,4))/c3124)
      - a213*a546/(c3124*c1234)
      
      + 3.0*a156*c4123/(c1234*g3*g3)
      *(a213*(a521*d12 - a561*d56) + a123*(a562*d56 - a512*d12)*c2341/c1342)
    
      + a15/(c1234*g3)
      *(- b13*(a213*a456 + a423*a256 - c4123*(a216 - a256))
	+ b23*c2341/c1342*(3.0*a156*a423 - A3(1,2,6)*c4123 
			   + b23*A(1,4)*a156*(S3(2,3,4) - S3(1,3,4))/c1342));
    
    return T;
  }

  std::complex<double> 
  ampq2g2l2::TTs3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    _ComplexD  c2341 = C(2,3,4,1), c3124 = C(3,1,2,4), a523 = A3(5,2,3); 
    double gt3   = Gt3; 
    
    _ComplexD TT = 3.0*A(1,4)*B(2,3)*c2341/(c3124*gt3*gt3)
      *((Dt14*A3(2,5,6) - S(5,6)*A3(2,3,6))*A3(5,4,1)
	- 0.5*Dt56*A3(2,5,6)*A3(5,6,1))
      - c2341/(c3124*gt3)*(0.5*A3(4,5,6)*(A3(5,6,3) + 2.0*a523)
			   - a523*A3(4,1,6));
    
    return TT;
  }
  
  std::complex<double> 
  ampq2g2l2::As1pppm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    _ComplexD As = _ComplexD(0.0, 1.0/3.0)/(A(2,3)*A(2,3)*S(5,6))
      *(- A(4,5)*C(3,1,2,6)*B(3,1)/S3(1,2,3) 
	+ B(1,6)*C(5,4,2,3)*A(3,4)/S3(2,3,4));
    
    return As;
  }
  
  std::complex<double> 
  ampq2g2l2::F1vs3pmpp(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double  t123 = S3(1,2,3), s12  = S(1,2);
    _ComplexD a531 = A3(5,3,1), a34  = A(3,4);
        
    _ComplexD Fvs = a531/(A(5,6)*a34*a34*s12)
      *(A(1,2)*a531*L1(-t123, -s12)/s12 + A(5,2)*L0(-t123, -s12));
    
    return Fvs;
  }
  
  std::complex<double> 
  ampq2g2l2::F2vs3pmpp(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double t123 = S3(1,2,3), t124 = S3(1,2,4), s12 = S(1,2), s56 = S(5,6);

    _ComplexD a23 = A(2,3), a24 = A(2,4), a35 = A(3,5), a45 = A(4,5),
      a12 = A(1,2), a56 = A(5,6), a34 = A(3,4), a52 = A(5,2), a25 = A(2,5), 
      b16 = B(1,6), b12 = B(1,2), b56 = B(5,6);
    
    _ComplexD Fvs = - a23*a24*a35*a45/(a12*a56*a34*a34*a34*a34)
      *Ls_1_2me(t123, t124, s12, s56)
      - (a24*a35 + a23*a45)/(a12*a56*a34*a34*a34)
      *(A4(5,3,1,2)*L0(-t123, -s12)/s12
	+ A4(5,6,4,2)*L0(-t123, -s56)/s56
	+ 0.5*a52*(Log(-t123) - Log(-t124)))
      
      - F1vs3pmpp(p1, p2, p3, p4, p5, p6) 
      - F1vs3pmpp(p6, p5, p3, p4, p2, p1)
      
      + 0.5/(a34*a34)*(a25*a25/(a12*a56) - b16*b16/(b12*b56));
    
    return Fvs;
  }

  std::complex<double> 
  ampq2g2l2::Fvf3pmpp(int p1, int p2, int p3, int p4, int p5, int p6) const {
    return - A(2,5)*A(2,5)/(A(1,2)*A(5,6)*A(3,4)*A(3,4))
      *Ls_1_2me(S3(1,2,3), S3(1,2,4), S(1,2), S(5,6));
  }

  std::complex<double> 
  ampq2g2l2::F2ax3pmpp(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double t123 = S3(1,2,3), s56 = S(5,6), s12 = S(1,2); 
    _ComplexD a25 = A(2,5), a12 = A(1,2), a56 = A(5,6), a34 = A(3,4); 
    
    _ComplexD Fax = a25*a25/(a12*a56*a34*a34)*(Log(-t123) - Log(-s56))
      - A3(2,4,6)*a25/(a12*a34*a34)
      *(S(3,4)*L1(-t123, -s56)/(s56*s56) + L0(-t123, -s56)/s56) 
      - A3(5,3,1)*a25/(a56*a34*a34)*L0(-t123, -s12)/s12;
    
    return Fax;
  }

  std::complex<double> 
  ampq2g2l2::Fax3pmpp(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double t134 = S3(1,3,4), t123 = S3(1,2,3), t124 = S3(1,2,4), s12 = S(1,2), 	
      s56 = S(5,6), s14 = S(1,4), s34 = S(3,4); 	

    _ComplexD a23 = A(2,3), a45 = A(4,5), a24 = A(2,4), a35 = A(3,5),
      a25 = A(2,5), a12 = A(1,2), a56 = A(5,6), a34 = A(3,4), b46 = B(4,6),
      a13 = A(1,3), b36 = B(3,6);

    _ComplexD Fax = - 0.5*(a23*a45 + a24*a35)*a25/(a12*a56*a34*a34*a34)
      *Ls_1_2me(t123, t124, s12, s56) 
      
      + F2ax3pmpp(p1, p2, p3, p4, p5, p6)
      - F2ax3pmpp(p1, p2, p4, p3, p5, p6)
      
      + (s14 + s34)*a25*b46/(a13*a34)*L1(-t123, -s56)/(s56*s56)
      + A3(2,3,1)*a25*b36/(a24*a34)*L1(-t124, -s56)/(s56*s56)
      - 1.0/(12.0*mtsq)*a25/(a34*s56)*(b46*t134/a13 + b36*C(2,3,4,1)/a24);
    
    return Fax;
  }


  std::complex<double> 
  ampq2g2l2::Faxsl3pmpp(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double s56 = S(5,6);
    _ComplexD a25 = A(2,5);

    _ComplexD Fax = 2.0*a25*B(4,6)*C(2,1,3,4)/(A(1,3)*A(2,3)*s56)
      *( - 0.5*L1(-S3(1,2,3), -s56)/s56 + 1.0/(24*mtsq))
      
      + 2.0*a25*B(3,6)*C(2,1,4,3)/(A(1,4)*A(2,4)*s56)
      *( - 0.5*L1(-S3(1,2,4), -s56)/s56 + 1.0/(24*mtsq));
    
    return Fax;
  }

  std::complex<double> 
  ampq2g2l2::FCvs3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double t123 = S3(1,2, 3), t124 = S3(1,2,4), s12 = S(1,2), s34 = S(3,4), 	
      g3 = G3; 	
    
    _ComplexD b12 = B(1,2), b56 = B(5,6), b46 = B(4,6), a25 = A(2,5), 	      
      a56 = A(5,6), a12 = A(1,2), b16 = B(1,6), a236 = A3(2,3,6), 	
      c3124 = C(3,1,2,4), c4123 = C(4,1,2,3), a2165 = A4(2,1,6,5);
    
    _ComplexD temp = L0(-t123, -s12)/s12; 
    _ComplexD Fvs = 2.0*b12*a236/(b56*c3124*c3124)
      *(C(3,1,2,6)*C(2,1,3,4)/c3124*temp - a236*(temp - 0.5*L1(-t123,-s12)/s12))
      
      - (3.0*D56*C(2,3,4,1)*C(5,3,4,6)*c4123/(c3124*g3*g3)
	 + 2.0*A3(3,2,1)*b46*(t123 - t124)
	 *(a25*t123 + a2165)/(c3124*c3124*c3124*g3)
	 - (2.0*a236*(t123 - t124) 
	    + D12*(a25*t123 + a2165)/a56)*A3(5,2,1)/(c3124*c3124*g3)
	 + 0.5*(a12*b16*b16/b56 + b12*a25*a25/a56 
		- 2.0*a25*b16)*c4123/(c3124*g3)
	 )*(Log(-s12) - Log(-s34));
    
    return Fvs;
  }

  std::complex<double> 
  ampq2g2l2::FBvs3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double s34 = S(3,4), s12 = S(1,2), s56 = S(5,6), t123 = S3(1,2,3),
      t124 = S3(1,2,4), g3 = G3, d34 = D34; 	 
    
    _ComplexD a23 = A(2,3), b46 = B(4,6), a12 = A(1,2), b56 = B(5,6),
      b12 = B(1,2), a56 = A(5,6), b14 = B(1,4), a35 = A(3,5), b13 = B(1,3),
      a45 = A(4,5), a24 = A(2,4), b36 = B(3,6), b16 = B(1,6);

    _ComplexD a231 = A3(2,3,1), a546 = A3(5,4,6), a241 = A3(2,4,1), 
      a536 = A3(5,3,6), a236 = A3(2,3,6), a246 = A3(2,4,6), a216 = A3(2,1,6),
      a256 = A3(2,5,6);
		      
    _ComplexD c3126 = C(3,1,2,6), c2564 = C(2,5,6,4), c3124 = C(3,1,2,4),
      c5241 = C(5,2,4,1), c4123 = C(4,1,2,3), c2341 = C(2,3,4,1), 
      c5346 = C(5,3,4,6), c2146 = C(2,1,4,6), b1256 = B4(1,2,5,6);
    
    _ComplexD Fvs = -2.0*a23*b46*c3126*c2564*Ls_1_2mh(s34, t123, s12, s56)
      *t123/(a12*b56*c3124*c3124*c3124*c3124)
      
      + (2.0*a23*b46*(b12*a56*a23*b46 - c5241*c3124)*c4123
	 *(t123 - t124)/(c3124*c3124*c3124*g3)
	 - 3.0*(s34*d34*c2341*c5346/g3 - a231*a546 - a241*a536)*c4123/(c3124*g3)
	 - b14*a35*a23*b46*c4123*c4123/(c3124*c3124*g3)
	 - b13*a45*a24*b36/g3
	 )*I3_3m(s12, s34, s56)
      
      + (2.0*a23*b46*t123*c2146/(a12*b56*c3124*c3124*c3124)
	 - (c2146*c2146 + 2.0*a236*a246)/(a12*b56*c3124*c3124))
      *(Log(-t123) - Log(-s34))
      
      + FCvs3pmpm(p1, p2, p3, p4, p5, p6);
    
    swap(); Fvs += FCvs3pmpm(p5, p6, p4, p3, p1, p2); swap();
    
    Fvs += b16*c4123*(b16*d34 - 2.0*b1256)/(b12*b56*c3124*g3)
      + (c2146*c2146 + a216*a256)/(a12*b56*c3124*c3124);
    
    return Fvs;
  }

  std::complex<double>
  ampq2g2l2::FCvf3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const {
    _ComplexD Fvf = 0.5*B(1,3)*A(4,5)*C(2,1,3,6)/(S3(1,2,3)*C(3,1,2,4))
      *I3_3m(S(1,2), S(3,4), S(5,6));
    return Fvf;
  }

  std::complex<double> 
  ampq2g2l2::FBvf3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    _ComplexD c2136 = C(2,1,3,6), c3124 = C(3,1,2,4);
    
    _ComplexD Fvf = - c2136*c2136/(A(1,2)*B(5,6)*c3124*c3124)
      *Ls_1_2mh(S(3,4), S3(1,2,3), S(1,2), S(5,6))
      
      - FCvf3pmpm(p1, p2, p3, p4, p5, p6);
    
    swap(); Fvf -= FCvf3pmpm(p5, p6, p4, p3, p1, p2); swap();
    
    return Fvf;
  }

  std::complex<double>
  ampq2g2l2::C1ax(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double g3 = G3;
    _ComplexD b13 = B(1,3), b46 = B(4,6), b34 = B(3,4), b56 = B(5,6),
      b36 = B(3,6), c2136 = C(2,1,3,6), c4123 = C(4,1,2,3), c3124 = C(3,1,2,4);
    
    _ComplexD Cax = 
      (- 6.0*B(1,2)*c2136*(A(2,5)*D34 - 2.0*A4(2,1,6,5))*c4123/(c3124*g3*g3)
       - b13*b46*c2136/(b34*b56*c3124*c3124)
       + B(1,4)*c2136
       *(3.0*c3124*b36-b46*(S3(1,2,3)-S3(1,2,4)))*c4123/(b34*b56*c3124*c3124*g3) 
       - b13*A(2,4)*b36*b36/(b34*b56*g3))*(Log(-S(1,2)) - Log(-S(3,4)));
    
    return Cax;
  }
  
  std::complex<double>
  ampq2g2l2::Cax(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double g3 = G3, d34 = D34, d12 = D12, d56 = D56, s34 = S(3,4), 
      s12 = S(1,2), s56 = S(5,6), t123 = S3(1,2,3), t124 = S3(1,2,4);

    _ComplexD b56 = B(5,6), b46 = B(4,6), b13 = B(1,3), b36 = B(3,6),
      b34 = B(3,4), a12 = A(1,2), a23 = A(2,3), a45 = A(4,5), a24 = A(2,4),
      b14 = B(1,4), a35 = A(3,5), a34 = A(3,4);

    _ComplexD a521 = A3(5,2,1), a216 = A3(2,1,6), a561 = A3(5,6,1), 
      a256 = A3(2,5,6), a531 = A3(5,3,1), a246 = A3(2,4,6), a541 = A3(5,4,1),
      a236 = A3(2,3,6);
		      
    _ComplexD c3124 = C(3,1,2,4), c4123 = C(4,1,2,3), c2136 = C(2,1,3,6),
      c2134 = C(2,1,3,4), c3126 = C(3,1,2,6);
    
    _ComplexD Cax = - 0.5/(a12*b56*c3124*c3124*c3124*c3124)
      *(c2134*c2134*c3126*c3126 - a23*b46*t123*a23*b46*t123)
      *Ls_1_2mh(s34, t123, s12, s56)
      
      + (- 1.5*(a521*a216 + a561*a256 - a531*a246 - a541*a236)*c4123/(c3124*g3)
	 - 3.0*d34*(a521*d12 - a561*d56)*c4123*c2136/(c3124*g3*g3)
	 - b13*a45*a24*b36/g3
	 + b14*a35*(t123 - t124)*c4123*c2136/(c3124*c3124*g3)
	 - 0.5*b13*a45*c2136/(t123*c3124))*I3_3m(s12, s34, s56)
      
      + C1ax(p1, p2, p3, p4, p5, p6)
      + C1ax(p6, p5, p3, p4, p2, p1)
      
      + c2136*c2136/(a12*b56*c3124*c3124)*(Log(-s56) - Log(-s34))
      + a24*b36/c3124*(a246*d34/(a12*b56*g3)
		       - a24*a35*d56/(a12*a34*g3)
		       - b13*b46*d12/(b34*b56*g3)
		       - 2.0*a531/g3
		       + a24*a35/(a12*a34*s56));
    
    return Cax;
  }

  std::complex<double>
  ampq2g2l2::FBax3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double s56 = S(5,6), s12 = S(1,2), t123 = S3(1,2,3);
    
    _ComplexD a24 = A(2,4), a12 = A(1,2), a13 = A(1,3), b56 = B(5,6),
      b13 = B(1,3), a35 = A(3,5), a34 = A(3,4), a45 = A(4,5), a146 = A3(1,4,6),
      c2136 = C(2,1,3,6), c3124 = C(3,1,2,4), c3126 = C(3,1,2,6), 
      c1234 = C(1,2,3,4), c4136 = C(4,1,3,6);
    
    _ComplexD Fax = Cax(p1, p2, p3, p4, p5, p6)
      - a24*a146*c2136*t123/(a12*a13*b56*c3124)*L1(-s56, -t123)/(t123*t123)
      - c2136*c3126*b13/(b56*c3124*c3124)*L0(-t123, -s12)/s12
      - a24*c1234*c2136*c3126/(a12*a13*b56*c3124*c3124)*L0(-t123, -s56)/s56
      + a24*a35*c4136/(a13*a34*s56*c3124)
      - 1.0/(12.0*mtsq)*c4136*a24*a45/(a13*a34*s56);
    
    return Fax;
  }

  std::complex<double>
  ampq2g2l2::FBax3pmmp(int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    double s56 = S(5,6), s12 = S(1,2), t123 = S3(1,2,3);

    _ComplexD b14 = B(1,4), a45 = A(4,5), b12 = B(1,2), b13 = B(1,3),
      a56 = A(5,6), a23 = A(2,3), a25 = A(2,5), b36 = B(3,6), b34 = B(3,4),
      b46 = B(4,6), c5231 = C(5,2,3,1), c4123 = C(4,1,2,3), c5123 = C(5,1,2,3),
      c4231 = C(4,2,3,1); 
    
    _ComplexD Fax = - Cax(p1, p2, p4, p3, p5, p6)
      + b14*b14*a45*c5231*t123/(b12*b13*a56*c4123)*L1(-s56, -t123)/(t123*t123)
      - c5231*c5123*a23/(a56*c4123*c4123)*L0(-t123, -s12)/s12
      + b14*c4231*c5231*c5123/(b12*b13*a56*c4123*c4123)*L0(-t123, -s56)/s56
      + b14*b14*a25*b36/(b13*b34*s56*c4123)
      - 1.0/(12.0*mtsq)*b14*b14*a25*b46/(b13*b34*s56);
    
    return Fax;
  }
  
  std::complex<double> 
  ampq2g2l2::FBaxsl3pmpm(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double s56 = S(5,6);
    return 2.0*A(2,4)*A(4,5)*C(2,1,3,6)/(A(1,3)*A(2,3)*s56)
      *(- 0.5*L1(-S3(1,2,3), -s56)/s56 + 1.0/(24.0*mtsq));
  }


  //--------    ONE-LOOP HELICITY AMPLITUDES    -------
#define V (-3.5)
  
  void ampq2g2l2::
  matrix_1loop_pppm(unsigned int nf, int p1, int p2, int p3, 
		    int p4, int p5, int p6, _ComplexD *M) const  
  {
    _ComplexD  I(0.0, 1.0);
    _ComplexD  a1234, a1324, a1243, a1342, a1423, a1432, atree, btree, 
      as1234, at1234, at1324, as1324;
  
    a1432 = V*Atree3pmpp(p1, p4, p3, p2, p5, p6)
      + I*(Fcc3pmpp(p1, p4, p3, p2, p5, p6) 
	   + Fsc3pmpp(p1, p4, p3, p2, p5, p6));
    
    a1423 = V*Atree3pmpp(p1, p4, p2, p3, p5, p6)
      + I*(Fcc3pmpp(p1, p4, p2, p3, p5, p6) 
	   + Fsc3pmpp(p1, p4, p2, p3, p5, p6));
    
    a1243 = V*Atree2ppmp(p1, p2, p4, p3, p5, p6)
      + I*(Fcc2ppmp(p1, p2, p4, p3, p5, p6) 
	   + Fsc2ppmp(p1, p2, p4, p3, p5, p6));
    
    a1342 = V*Atree2ppmp(p1, p3, p4, p2, p5, p6)
      + I*(Fcc2ppmp(p1, p3, p4, p2, p5, p6) 
	   + Fsc2ppmp(p1, p3, p4, p2, p5, p6));
    
    atree = Atree1pppm(p1, p2, p3, p4, p5, p6);
    a1234 = V*atree + I*(Fcc1pppm(p1, p2, p3, p4, p5, p6) 
	   + Fsc1pppm(p1, p2, p3, p4, p5, p6));
    
    btree = Atree1pppm(p1, p3, p2, p4, p5, p6);
    a1324 = V*btree
      + I*(Fcc1pppm(p1, p3, p2, p4, p5, p6) 
	   + Fsc1pppm(p1, p3, p2, p4, p5, p6));
    
    as1234 = As1pppm(p1, p2, p3, p4, p5, p6);
    at1234 = as1234*S(2,3)/(20.0*mtsq);
    
    as1324 = As1pppm(p1, p3, p2, p4, p5, p6);
    at1324 = as1324*S(2,3)/(20.0*mtsq);
    
    double __nf  = (double) nf;
        
    M[0] = atree;
    M[1] = btree;
    M[2] = a1234 - a1432/Nc2 + (at1234 - __nf*as1234)/Nc;
    M[3] = a1324 - a1423/Nc2 + (at1324 - __nf*as1324)/Nc;
    M[4] = a1234 + a1324 + a1243 + a1342 + a1423 + a1432;
  }
  
  void ampq2g2l2::
  matrix_1loop_ppmm(unsigned int, int p1, int p2, int p3, 
		    int p4, int p5, int p6, _ComplexD *M) const 
  {
    _ComplexD I(0.0, 1.0), a1234, a1324, a1243, a1342, a1423, a1432,
      atree, btree;
    
    a1432 = V*Atree3pmmp(p1, p4, p3, p2, p5, p6)
      + I*(Fcc3pmmp(p1, p4, p3, p2, p5, p6) 
	   + Fsc3pmmp(p1, p4, p3, p2, p5, p6));
    
    a1423 = V*Atree3pmpm(p1, p4, p2, p3, p5, p6)
      + I*(Fcc3pmpm(p1, p4, p2, p3, p5, p6) 
	   + Fsc3pmpm(p1, p4, p2, p3, p5, p6));
    
    a1243 = V*Atree2ppmm(p1, p2, p4, p3, p5, p6)
      + I*(Fcc2ppmm(p1, p2, p4, p3, p5, p6) 
	   + Fsc2ppmm(p1, p2, p4, p3, p5, p6));
    
    a1342 = V*Atree2pmmp(p1, p3, p4, p2, p5, p6)
      + I*(Fcc2pmmp(p1, p3, p4, p2, p5, p6) 
	   + Fsc2pmmp(p1, p3, p4, p2, p5, p6));
    
    atree = Atree1ppmm(p1, p2, p3, p4, p5, p6);
    a1234 = V*atree
      + I*(Fcc1ppmm(p1, p2, p3, p4, p5, p6) 
	   + Fsc1ppmm(p1, p2, p3, p4, p5, p6));
    
    btree = Atree1pmpm(p1, p3, p2, p4, p5, p6);
    a1324 = V*btree
      + I*(Fcc1pmpm(p1, p3, p2, p4, p5, p6) 
	   + Fsc1pmpm(p1, p3, p2, p4, p5, p6));
    
    M[0] = atree;
    M[1] = btree;
    M[2] = a1234 - a1432/Nc2;
    M[3] = a1324 - a1423/Nc2;
    M[4] = a1234 + a1324 + a1243 + a1342 + a1423 + a1432;
  }
  
  void ampq2g2l2::
  matrix_1loop_pmpm(unsigned int, int p1, int p2, int p3,
		    int p4, int p5, int p6, _ComplexD *M) const  
  {
    _ComplexD I(0.0, 1.0), a1234, a1324, a1243, a1342, a1423, a1432,
      atree, btree;
    
    
    a1432 = V*Atree3pmpm(p1, p4, p3, p2, p5, p6)
      + I*(Fcc3pmpm(p1, p4, p3, p2, p5, p6) 
	   + Fsc3pmpm(p1, p4, p3, p2, p5, p6));
    
    a1423 = V*Atree3pmmp(p1, p4, p2, p3, p5, p6)
      + I*(Fcc3pmmp(p1, p4, p2, p3, p5, p6) 
	   + Fsc3pmmp(p1, p4, p2, p3, p5, p6));
    
    a1243 = V*Atree2pmmp(p1, p2, p4, p3, p5, p6)
      + I*(Fcc2pmmp(p1, p2, p4, p3, p5, p6) 
	   + Fsc2pmmp(p1, p2, p4, p3, p5, p6));
    
    a1342 = V*Atree2ppmm(p1, p3, p4, p2, p5, p6)
      + I*(Fcc2ppmm(p1, p3, p4, p2, p5, p6) 
	   + Fsc2ppmm(p1, p3, p4, p2, p5, p6));
    
    atree = Atree1pmpm(p1, p2, p3, p4, p5, p6);
    a1234 = V*atree
      + I*(Fcc1pmpm(p1, p2, p3, p4, p5, p6) 
	   + Fsc1pmpm(p1, p2, p3, p4, p5, p6));
    
    btree = Atree1ppmm(p1, p3, p2, p4, p5, p6);
    a1324 = V*btree
      + I*(Fcc1ppmm(p1, p3, p2, p4, p5, p6) 
	   + Fsc1ppmm(p1, p3, p2, p4, p5, p6));
    
    M[0] = atree;
    M[1] = btree;
    M[2] = a1234 - a1432/Nc2;
    M[3] = a1324 - a1423/Nc2;
    M[4] = a1234 + a1324 + a1243 + a1342 + a1423 + a1432;
  }  
  
  void ampq2g2l2::
  matrix_1loop_pmmm(unsigned int nf, int p1, int p2, int p3, 
		    int p4, int p5, int p6, _ComplexD *M) const 
  {
    _ComplexD I(0.0, 1.0), a1234, a1324, a1243, a1342, a1423, a1432,
      atree, btree, as1234, at1234, at1324, as1324;
    
    a1432 = V*Atree3pmmm(p1, p4, p3, p2, p5, p6)
      + I*(Fcc3pmmm(p1, p4, p3, p2, p5, p6) 
	   + Fsc3pmmm(p1, p4, p3, p2, p5, p6));
    
    a1423 = V*Atree3pmmm(p1, p4, p2, p3, p5, p6)
      + I*(Fcc3pmmm(p1, p4, p2, p3, p5, p6) 
	   + Fsc3pmmm(p1, p4, p2, p3, p5, p6));
    
    a1243 = V*Atree2pmmm(p1, p2, p4, p3, p5, p6)
      + I*(Fcc2pmmm(p1, p2, p4, p3, p5, p6) 
	   + Fsc2pmmm(p1, p2, p4, p3, p5, p6));
    
    a1342 = V*Atree2pmmm(p1, p3, p4, p2, p5, p6)
      + I*(Fcc2pmmm(p1, p3, p4, p2, p5, p6) 
	   + Fsc2pmmm(p1, p3, p4, p2, p5, p6));
    
    atree = Atree1pmmm(p1, p2, p3, p4, p5, p6);
    a1234 = V*atree
      + I*(Fcc1pmmm(p1, p2, p3, p4, p5, p6) 
	   + Fsc1pmmm(p1, p2, p3, p4, p5, p6));
    
    btree = Atree1pmmm(p1, p3, p2, p4, p5, p6);
    a1324 = V*btree
      + I*(Fcc1pmmm(p1, p3, p2, p4, p5, p6) 
	   + Fsc1pmmm(p1, p3, p2, p4, p5, p6));
    
    as1234 = As1pmmm(p1, p2, p3, p4, p5, p6);
    at1234 = as1234*S(2,3)/(20.0*mtsq);
    
    as1324 = As1pmmm(p1, p3, p2, p4, p5, p6);
    at1324 = as1324*S(2,3)/(20.0*mtsq);
    
    double __nf  = (double) nf;
    
    M[0] = atree;
    M[1] = btree;
    M[2] = a1234 - a1432/Nc2 + (at1234 - __nf*as1234)/Nc;
    M[3] = a1324 - a1423/Nc2 + (at1324 - __nf*as1324)/Nc;
    M[4] = a1234 + a1324 + a1243 + a1342 + a1423 + a1432;
  }

  void ampq2g2l2::
  color_1loop_pppm(unsigned int nf, int p1, int p2, int p3, 
		   int p4, int p5, int p6, _ComplexD *M) const 
  {
    _ComplexD I(0.0, 1.0), a1234, a1324, a1243, a1342, a1423, a1432, 
      atree, btree, as1234, at1234, ax1423, ax1432, axsl1423, av1423,
      at1324, as1324;
    
    a1432 = V*Atree3pmpp(p1, p4, p3, p2, p5, p6)
      + I*(Fcc3pmpp(p1, p4, p3, p2, p5, p6) 
	   + Fsc3pmpp(p1, p4, p3, p2, p5, p6));
    
    a1423 = V*Atree3pmpp(p1, p4, p2, p3, p5, p6)
      + I*(Fcc3pmpp(p1, p4, p2, p3, p5, p6) 
	   + Fsc3pmpp(p1, p4, p2, p3, p5, p6));
    
    a1243 = V*Atree2ppmp(p1, p2, p4, p3, p5, p6)
      + I*(Fcc2ppmp(p1, p2, p4, p3, p5, p6) 
	   + Fsc2ppmp(p1, p2, p4, p3, p5, p6));
    
    a1342 = V*Atree2ppmp(p1, p3, p4, p2, p5, p6)
      + I*(Fcc2ppmp(p1, p3, p4, p2, p5, p6) 
	   + Fsc2ppmp(p1, p3, p4, p2, p5, p6));
    
    atree = Atree1pppm(p1, p2, p3, p4, p5, p6);
    a1234 = V*atree + I*(Fcc1pppm(p1, p2, p3, p4, p5, p6) 
			 + Fsc1pppm(p1, p2, p3, p4, p5, p6));
    
    btree = Atree1pppm(p1, p3, p2, p4, p5, p6);
    a1324 = V*btree + I*(Fcc1pppm(p1, p3, p2, p4, p5, p6) 
			 + Fsc1pppm(p1, p3, p2, p4, p5, p6));
    
    as1234 = As1pppm(p1, p2, p3, p4, p5, p6);
    at1234 = as1234*S(2,3)/(20.0*mtsq);
    
    as1324 = As1pppm(p1, p3, p2, p4, p5, p6);
    at1324 = as1324*S(2,3)/(20.0*mtsq);
    
    ax1423   = I*Fax3pmpp(p1, p4, p2, p3, p5, p6);
    ax1432   = I*Fax3pmpp(p1, p4, p3, p2, p5, p6);
    axsl1423 = I*Faxsl3pmpp(p1, p4, p2, p3, p5, p6);
    
    av1423 = -I*(Fvf3pmpp(p1, p4, p2, p3, p5, p6)
		 + Fvs3pmpp(p1, p4, p2, p3, p5, p6));
    
    double __nf = (double) nf;
    _ComplexD __C = a1234 + a1324 + a1243 + a1342 + a1423 + a1432;
    
    M[0] = atree;
    M[1] = a1432;
    M[2] = a1234 - a1432 - __C;
    M[3] = at1234 - __nf*as1234;
    
    M[4] = btree;
    M[5] = a1423;
    M[6] = a1324 - a1423;
    M[7] = at1324 - __nf*as1324;
    
    M[8] = __C;
    M[9] = av1423;
    
    M[10] = 0.5*(axsl1423 + ax1423 - ax1432);
    M[11] = 0.5*(axsl1423 - ax1423 + ax1432);
    M[12] = 0.5*(ax1423 + ax1432 - axsl1423);
  }

  void ampq2g2l2::
  color_1loop_ppmm(unsigned int nf, int p1, int p2, int p3, 
		   int p4, int p5, int p6, _ComplexD *M) const 
  {
    _ComplexD I(0.0, 1.0), a1234, a1324, a1243, a1342, a1423, a1432, 
      atree, btree, as1234, at1234, ax1423, ax1432, axsl1423, av1423,
      at1324, as1324;
    
    a1432 = V*Atree3pmmp(p1, p4, p3, p2, p5, p6)
      + I*(Fcc3pmmp(p1, p4, p3, p2, p5, p6) 
	   + Fsc3pmmp(p1, p4, p3, p2, p5, p6));
    
    a1423 = V*Atree3pmpm(p1, p4, p2, p3, p5, p6)
      + I*(Fcc3pmpm(p1, p4, p2, p3, p5, p6) 
	   + Fsc3pmpm(p1, p4, p2, p3, p5, p6));
    
    a1243 = V*Atree2ppmm(p1, p2, p4, p3, p5, p6)
      + I*(Fcc2ppmm(p1, p2, p4, p3, p5, p6) 
	   + Fsc2ppmm(p1, p2, p4, p3, p5, p6));
    
    a1342 = V*Atree2pmmp(p1, p3, p4, p2, p5, p6)
      + I*(Fcc2pmmp(p1, p3, p4, p2, p5, p6) 
	   + Fsc2pmmp(p1, p3, p4, p2, p5, p6));
    
    atree = Atree1ppmm(p1, p2, p3, p4, p5, p6);
    a1234 = V*atree + I*(Fcc1ppmm(p1, p2, p3, p4, p5, p6) 
			 + Fsc1ppmm(p1, p2, p3, p4, p5, p6));
    
    btree = Atree1pmpm(p1, p3, p2, p4, p5, p6);
    a1324 = V*btree + I*(Fcc1pmpm(p1, p3, p2, p4, p5, p6) 
			 + Fsc1pmpm(p1, p3, p2, p4, p5, p6));
    
    as1234 = at1234 = as1324 = at1324 = 0.0;
    
    ax1423   = I*Fax3pmpm(p1, p4, p2, p3, p5, p6);
    ax1432   = I*Fax3pmmp(p1, p4, p3, p2, p5, p6);
    axsl1423 = I*Faxsl3pmpm(p1, p4, p2, p3, p5, p6);
    
    av1423 = -I*(Fvf3pmpm(p1, p4, p2, p3, p5, p6) 
		 + Fvs3pmpm(p1, p4, p2, p3, p5, p6));
    
    double __nf = (double) nf;
    _ComplexD __C = a1234 + a1324 + a1243 + a1342 + a1423 + a1432;
    
    M[0] = atree;
    M[1] = a1432;
    M[2] = a1234 - a1432 - __C;
    M[3] = at1234 - __nf*as1234;
    
    M[4] = btree;
    M[5] = a1423;
    M[6] = a1324 - a1423;
    M[7] = at1324 - __nf*as1324;
    
    M[8] = __C;
    M[9] = av1423;
    
    M[10] = 0.5*(axsl1423 + ax1423 - ax1432);
    M[11] = 0.5*(axsl1423 - ax1423 + ax1432);
    M[12] = 0.5*(ax1423 + ax1432 - axsl1423);
  }
  
  void ampq2g2l2::
  color_1loop_pmpm(unsigned int nf, int p1, int p2, int p3, 
		   int p4, int p5, int p6, _ComplexD *M) const 
  {
    _ComplexD I(0.0, 1.0), a1234, a1324, a1243, a1342, a1423, a1432, 
      atree, btree, as1234, at1234, ax1423, ax1432, axsl1423, av1423,
      at1324, as1324;
  
    a1432 = V*Atree3pmpm(p1, p4, p3, p2, p5, p6)
      + I*(Fcc3pmpm(p1, p4, p3, p2, p5, p6) 
	   + Fsc3pmpm(p1, p4, p3, p2, p5, p6));
    
    a1423 = V*Atree3pmmp(p1, p4, p2, p3, p5, p6)
      + I*(Fcc3pmmp(p1, p4, p2, p3, p5, p6) 
	   + Fsc3pmmp(p1, p4, p2, p3, p5, p6));
    
    a1243 = V*Atree2pmmp(p1, p2, p4, p3, p5, p6)
      + I*(Fcc2pmmp(p1, p2, p4, p3, p5, p6) 
	   + Fsc2pmmp(p1, p2, p4, p3, p5, p6));
    
    a1342 = V*Atree2ppmm(p1, p3, p4, p2, p5, p6)
      + I*(Fcc2ppmm(p1, p3, p4, p2, p5, p6) 
	   + Fsc2ppmm(p1, p3, p4, p2, p5, p6));
    
    atree = Atree1pmpm(p1, p2, p3, p4, p5, p6);
    a1234 = V*atree + I*(Fcc1pmpm(p1, p2, p3, p4, p5, p6) 
			 + Fsc1pmpm(p1, p2, p3, p4, p5, p6));
    
    btree = Atree1ppmm(p1, p3, p2, p4, p5, p6);
    a1324 = V*btree + I*(Fcc1ppmm(p1, p3, p2, p4, p5, p6) 
			 + Fsc1ppmm(p1, p3, p2, p4, p5, p6));
    
    as1234 = at1234 = as1324 = at1324 = 0.0;

    ax1423   = I*Fax3pmmp(p1, p4, p2, p3, p5, p6);
    ax1432   = I*Fax3pmpm(p1, p4, p3, p2, p5, p6);
    axsl1423 = I*Faxsl3pmmp(p1, p4, p2, p3, p5, p6);
    
    av1423 = -I*(Fvf3pmmp(p1, p4, p2, p3, p5, p6) 
		 + Fvs3pmmp(p1, p4, p2, p3, p5, p6));
    
    double __nf = (double) nf;
    _ComplexD __C = a1234 + a1324 + a1243 + a1342 + a1423 + a1432;
  
    M[0] = atree;
    M[1] = a1432;
    M[2] = a1234 - a1432 - __C;
    M[3] = at1234 - __nf*as1234;
    
    M[4] = btree;
    M[5] = a1423;
    M[6] = a1324 - a1423;
    M[7] = at1324 - __nf*as1324;
    
    M[8] = __C;
    M[9] = av1423;
    
    M[10] = 0.5*(axsl1423 + ax1423 - ax1432);
    M[11] = 0.5*(axsl1423 - ax1423 + ax1432);
    M[12] = 0.5*(ax1423 + ax1432 - axsl1423);
  }

  void ampq2g2l2::
  color_1loop_pmmm(unsigned int nf, int p1, int p2, int p3, 
		   int p4, int p5, int p6, _ComplexD *M) const 
  {
    _ComplexD I(0.0, 1.0), a1234, a1324, a1243, a1342, a1423, a1432, 
      atree, btree, as1234, at1234, ax1423, ax1432, axsl1423, av1423,
      at1324, as1324;
    
    a1432 = V*Atree3pmmm(p1, p4, p3, p2, p5, p6)
      + I*(Fcc3pmmm(p1, p4, p3, p2, p5, p6) 
	   + Fsc3pmmm(p1, p4, p3, p2, p5, p6));
    
    a1423 = V*Atree3pmmm(p1, p4, p2, p3, p5, p6)
      + I*(Fcc3pmmm(p1, p4, p2, p3, p5, p6) 
	   + Fsc3pmmm(p1, p4, p2, p3, p5, p6));

    a1243 = V*Atree2pmmm(p1, p2, p4, p3, p5, p6)
      + I*(Fcc2pmmm(p1, p2, p4, p3, p5, p6) 
	   + Fsc2pmmm(p1, p2, p4, p3, p5, p6));
    
    a1342 = V*Atree2pmmm(p1, p3, p4, p2, p5, p6)
      + I*(Fcc2pmmm(p1, p3, p4, p2, p5, p6) 
	   + Fsc2pmmm(p1, p3, p4, p2, p5, p6));
    
    atree = Atree1pmmm(p1, p2, p3, p4, p5, p6);
    a1234 = V*atree + I*(Fcc1pmmm(p1, p2, p3, p4, p5, p6) 
			 + Fsc1pmmm(p1, p2, p3, p4, p5, p6));
    
    btree = Atree1pmmm(p1, p3, p2, p4, p5, p6);
    a1324 = V*btree + I*(Fcc1pmmm(p1, p3, p2, p4, p5, p6) 
			 + Fsc1pmmm(p1, p3, p2, p4, p5, p6));
    
    as1234 = As1pmmm(p1, p2, p3, p4, p5, p6);
    at1234 = as1234*S(2,3)/(20.0*mtsq);
    
    as1324 = As1pmmm(p1, p3, p2, p4, p5, p6);
    at1324 = as1324*S(2,3)/(20.0*mtsq);
    
    ax1423   = I*Fax3pmmm(p1, p4, p2, p3, p5, p6);
    ax1432   = I*Fax3pmmm(p1, p4, p3, p2, p5, p6);
    axsl1423 = I*Faxsl3pmmm(p1, p4, p2, p3, p5, p6);
    
    av1423 = -I*(Fvf3pmmm(p1, p4, p2, p3, p5, p6) 
		 + Fvs3pmmm(p1, p4, p2, p3, p5, p6));
    
    double __nf = (double) nf;
    _ComplexD __C = a1234 + a1324 + a1243 + a1342 + a1423 + a1432;
    
    M[0] = atree;
    M[1] = a1432;
    M[2] = a1234 - a1432 - __C;
    M[3] = at1234 - __nf*as1234;
    
    M[4] = btree;
    M[5] = a1423;
    M[6] = a1324 - a1423;
    M[7] = at1324 - __nf*as1324;
    
    M[8] = __C;
    M[9] = av1423;
    
    M[10] = 0.5*(axsl1423 + ax1423 - ax1432);
    M[11] = 0.5*(axsl1423 - ax1423 + ax1432);
    M[12] = 0.5*(ax1423 + ax1432 - axsl1423);
  }  
  
#undef V

  //-------     AMPLITUDES     -----
  
  double ampq2g2l2::su3_tree(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double amp;
    _ComplexD M[2];
    
    matrix_tree_pppm(p1, p2, p3, p4, p5, p6, M); amp  = su3_amptree(M);
    matrix_tree_ppmm(p1, p2, p3, p4, p5, p6, M); amp += su3_amptree(M);
    matrix_tree_pmpm(p1, p2, p3, p4, p5, p6, M); amp += su3_amptree(M);
    matrix_tree_pmmm(p1, p2, p3, p4, p5, p6, M); amp += su3_amptree(M);
    
    matrix_tree_pppm(p1, p2, p3, p4, p6, p5, M); amp += su3_amptree(M);
    matrix_tree_ppmm(p1, p2, p3, p4, p6, p5, M); amp += su3_amptree(M);
    matrix_tree_pmpm(p1, p2, p3, p4, p6, p5, M); amp += su3_amptree(M);  
    matrix_tree_pmmm(p1, p2, p3, p4, p6, p5, M); amp += su3_amptree(M);
    
    return 2.0*amp;
  }

  double 
  ampq2g2l2::su3_tree_mch(int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    _ComplexD M[2];
    int hel = (int) (8*_M_rng());
    
    switch(hel) {
    case 0: matrix_tree_pppm(p1, p2, p3, p4, p5, p6, M); break;
    case 1: matrix_tree_ppmm(p1, p2, p3, p4, p5, p6, M); break;
    case 2: matrix_tree_pmpm(p1, p2, p3, p4, p5, p6, M); break;
    case 3: matrix_tree_pmmm(p1, p2, p3, p4, p5, p6, M); break;
    case 4: matrix_tree_pppm(p1, p2, p3, p4, p6, p5, M); break;
    case 5: matrix_tree_ppmm(p1, p2, p3, p4, p6, p5, M); break;
    case 6: matrix_tree_pmpm(p1, p2, p3, p4, p6, p5, M); break;
    case 7: matrix_tree_pmmm(p1, p2, p3, p4, p6, p5, M); break;
    }
      
    return 16.0*su3_amptree(M);
  }
  
  double ampq2g2l2::su3_amploop(_ComplexD *M) 
  {
    return  Na*real((Na*M[2] - M[3] + M[4])*conj(M[0]))
      +     Na*real((Na*M[3] - M[2] + M[4])*conj(M[1]));
  }
  
  double ampq2g2l2::
  su3_1loop(unsigned int nf, int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double amp;
    _ComplexD M[5];
    
    matrix_1loop_pppm(nf, p1,p2,p3,p4,p5,p6, M); amp  = su3_amploop(M);
    matrix_1loop_ppmm(nf, p1,p2,p3,p4,p5,p6, M); amp += su3_amploop(M);
    matrix_1loop_pmpm(nf, p1,p2,p3,p4,p5,p6, M); amp += su3_amploop(M);
    matrix_1loop_pmmm(nf, p1,p2,p3,p4,p5,p6, M); amp += su3_amploop(M);
    matrix_1loop_pppm(nf, p1,p2,p3,p4,p6,p5, M); amp += su3_amploop(M);
    matrix_1loop_ppmm(nf, p1,p2,p3,p4,p6,p5, M); amp += su3_amploop(M);
    matrix_1loop_pmpm(nf, p1,p2,p3,p4,p6,p5, M); amp += su3_amploop(M);
    matrix_1loop_pmmm(nf, p1,p2,p3,p4,p6,p5, M); amp += su3_amploop(M);

    //-----the opposit helicity states (e+e- : means factor 2) -----
    swap();
    matrix_1loop_pppm(nf, p1,p2,p3,p4,p5,p6, M); amp += su3_amploop(M);
    matrix_1loop_ppmm(nf, p1,p2,p3,p4,p5,p6, M); amp += su3_amploop(M);
    matrix_1loop_pmpm(nf, p1,p2,p3,p4,p5,p6, M); amp += su3_amploop(M);
    matrix_1loop_pmmm(nf, p1,p2,p3,p4,p5,p6, M); amp += su3_amploop(M);
    matrix_1loop_pppm(nf, p1,p2,p3,p4,p6,p5, M); amp += su3_amploop(M);
    matrix_1loop_ppmm(nf, p1,p2,p3,p4,p6,p5, M); amp += su3_amploop(M);
    matrix_1loop_pmpm(nf, p1,p2,p3,p4,p6,p5, M); amp += su3_amploop(M);
    matrix_1loop_pmmm(nf, p1,p2,p3,p4,p6,p5, M); amp += su3_amploop(M);
    swap();
    
    return amp;
  }

  double ampq2g2l2::
  su3_1loop_mch(unsigned int nf, int p1, int p2, int p3, int p4, int p5, int p6) const
  {
    _ComplexD M[5];
    int hpm = (int) (2*_M_rng());
    int hel = (int) (8*_M_rng());
    
    if(hpm == 1) swap();
    switch(hel) {
    case 0: matrix_1loop_pppm(nf, p1,p2,p3,p4,p5,p6, M); break;
    case 1: matrix_1loop_ppmm(nf, p1,p2,p3,p4,p5,p6, M); break;
    case 2: matrix_1loop_pmpm(nf, p1,p2,p3,p4,p5,p6, M); break;
    case 3: matrix_1loop_pmmm(nf, p1,p2,p3,p4,p5,p6, M); break;
    case 4: matrix_1loop_pppm(nf, p1,p2,p3,p4,p6,p5, M); break;
    case 5: matrix_1loop_ppmm(nf, p1,p2,p3,p4,p6,p5, M); break;
    case 6: matrix_1loop_pmpm(nf, p1,p2,p3,p4,p6,p5, M); break;
    case 7: matrix_1loop_pmmm(nf, p1,p2,p3,p4,p6,p5, M); break;
    }
    if(hpm == 1) swap();
    
    return 16.0*su3_amploop(M);
  }

  void ampq2g2l2::su3_ampcc(_ComplexD *P, _ComplexD *M, unsigned int ij, double *cc) 
  {
    double S1 =     real(M[0]*conj(M[0]) + P[0]*conj(P[0]));
    double S2 =     real(M[1]*conj(M[1]) + P[1]*conj(P[1]));
    double S3 = 2.0*real(M[0]*conj(M[1]) + P[0]*conj(P[1]));
    
    switch (ij) {
    case 12: *cc += Na*(S2 + S3 - Na*S1);         break;
    case 13: *cc += Na*(S1 + S3 - Na*S2);         break;
    case 14: *cc -= Na*((S1 + S2 + S3)/Nc2 + S3); break;
    case 23: *cc -= Na*Nc2*(S1 + S2);             break;
    }
  }
  
  void ampq2g2l2::su3_ampcc(_ComplexD *P, _ComplexD *M, unsigned int ij, _Pair *cc) 
  {
    double S1 =     real(M[0]*conj(M[0]) + P[0]*conj(P[0]));
    double S2 =     real(M[1]*conj(M[1]) + P[1]*conj(P[1]));
    double S3 = 2.0*real(M[0]*conj(M[1]) + P[0]*conj(P[1]));
    
    _ComplexD C1 = P[0]*conj(M[0]);
    _ComplexD C2 = P[1]*conj(M[1]);
    _ComplexD C3 = P[0]*conj(M[1]) + P[1]*conj(M[0]);
    
    switch (ij) {
    case 12:
      cc -> first  += Na*(S2 + S3 - Na*S1);
      cc -> second += Na*(C2 + C3 - Na*C1);
      break;
    case 13:
      cc -> first  += Na*(S1 + S3 - Na*S2);
      cc -> second += Na*(C1 + C3 - Na*C2);
      break;
    case 14:
      cc -> first  -= Na*((S1 + S2 + S3)/Nc2 + S3);
      cc -> second -= Na*((C1 + C2 + C3)/Nc2 + C3);
      break;
    case 23:
      cc -> first  -= Na*Nc2*(S1 + S2);
      cc -> second -= Na*Nc2*(C1 + C2);
      break;
    }
  }
  
#define Cond14(i,j)				\
(i==p1 && j==p4) || (i==p4 && j==p1)

#define Cond12(i,j)				\
(i==p1 && j==p2) || (i==p2 && j==p1) ||		\
(i==p3 && j==p4) || (i==p4 && j==p3)

#define Cond13(i,j)				\
(i==p1 && j==p3) || (i==p3 && j==p1) || 	\
(i==p2 && j==p4) || (i==p4 && j==p2)

#define Cond23(i,j)				\
(i==p2 && j==p3) || (i==p3 && j==p2)


  std::pair<double, std::complex<double> > 
  ampq2g2l2::su3_cc(int i, int j, int p1, int p2, int p3, int p4, int p5, int p6) const 
  {
    double fcc = 0.0;
    _ComplexD M[8][2];
    _Pair cc(0.0, 0.0);
    unsigned int ij, idx = (j == p3 ? 1 : 0);
    
    if(Cond14(i,j))      ij = 14;
    else if(Cond12(i,j)) ij = 12;
    else if(Cond13(i,j)) ij = 13; 
    else if(Cond23(i,j)) ij = 23;
    else throw("Error in ampq2g2l2::su3_cc(...)");
   
    matrix_tree_pppm(p1, p2, p3, p4, p5, p6, M[0]);
    matrix_tree_pmpm(p1, p2, p3, p4, p5, p6, M[1+idx]);
    matrix_tree_ppmm(p1, p2, p3, p4, p5, p6, M[2-idx]);
    matrix_tree_pmmm(p1, p2, p3, p4, p5, p6, M[3]);
    
    matrix_tree_pppm(p1, p2, p3, p4, p6, p5, M[4]);
    matrix_tree_pmpm(p1, p2, p3, p4, p6, p5, M[5+idx]);      
    matrix_tree_ppmm(p1, p2, p3, p4, p6, p5, M[6-idx]);
    matrix_tree_pmmm(p1, p2, p3, p4, p6, p5, M[7]);
    
    if(j == p2 || j == p3)
      for(unsigned int hel = 0; hel < 8; hel += 2)
	su3_ampcc(M[hel], M[hel+1], ij, &cc);
    else {
      for(unsigned int hel = 0; hel < 8; hel += 2)
	su3_ampcc(M[hel], M[hel+1], ij, &fcc);
      cc.first = fcc, cc.second = 0.0;
    }
    
    return cc;
  }

  void ampq2g2l2::su3_ampcc(_ComplexD *P, _ComplexD *M, double *cc)
  {
    double S1 = real(M[0]*conj(M[0])+P[0]*conj(P[0]));
    double S2 = real(M[1]*conj(M[1])+P[1]*conj(P[1]));
    double S3 = 2*real(M[0]*conj(M[1])+P[0]*conj(P[1]));
    
    cc[0] += Na*(S2 + S3 - Na*S1);
    cc[1] += Na*(S1 + S3 - Na*S2);
    cc[2] -= Na*((S1 + S2 + S3)/Nc2 + S3);
    cc[3] -= Na*Nc2*(S1 + S2);
  }
  
#define X(i,j) std::log(std::abs(s/S(i,j)))
 
  void ampq2g2l2::su3_kp(unsigned int nf, int pa, int p1, int p2, int p3, 
			 int p4, int p5, int p6, su3_kp_i1 *res, double al) const  
  {
    _ComplexD P[2], M[2];
    double cc[4] = {0.0,0.0,0.0,0.0}, xq = Gq/Cf, xg = Gg(nf)/Nc, s = S(5,6);
    
    matrix_tree_pppm(p1, p2, p3, p4, p5, p6, P);
    matrix_tree_pmpm(p1, p2, p3, p4, p5, p6, M);
    su3_ampcc(P,M, cc);
    
    matrix_tree_ppmm(p1, p2, p3, p4, p5, p6, P);
    matrix_tree_pmmm(p1, p2, p3, p4, p5, p6, M);
    su3_ampcc(P,M, cc);
    
    matrix_tree_pppm(p1, p2, p3, p4, p6, p5, P);
    matrix_tree_pmpm(p1, p2, p3, p4, p6, p5, M);
    su3_ampcc(P,M, cc);
    
    matrix_tree_ppmm(p1, p2, p3, p4, p6, p5, P);
    matrix_tree_pmmm(p1, p2, p3, p4, p6, p5, M);
    su3_ampcc(P,M, cc);
    
    res->tree = -(cc[0]+cc[1]+cc[2])/Cf;
     
    if(pa==p1 || pa==p4)      res->ga = xg*(cc[0]+cc[1])+xq*cc[2];
    else if(pa==p2 || pa==p3) res->ga = xq*(cc[0]+cc[1])+xg*cc[3];
    else throw("Error in ampq2g2l2::su3_kp(...)");
    
    if(pa==p1) res->pa = (X(1,2)*cc[0]+X(1,3)*cc[1]+X(1,4)*cc[2])/Cf;
    if(pa==p2) res->pa = (X(1,2)*cc[0]+X(2,4)*cc[1]+X(2,3)*cc[3])/Nc;
    if(pa==p3) res->pa = (X(3,4)*cc[0]+X(1,3)*cc[1]+X(2,3)*cc[3])/Nc;
    if(pa==p4) res->pa = (X(3,4)*cc[0]+X(2,4)*cc[1]+X(1,4)*cc[2])/Cf;

    //    1-loop log terms
    double l12 = Xq(S(1,2),s)+Xq(S(3,4),s)+Xg(S(1,2),s,nf)+Xg(S(3,4),s,nf), 
      l13 = Xq(S(1,3),s)+Xq(S(2,4),s)+Xg(S(1,3),s,nf)+Xg(S(2,4),s,nf),
      l14 = Xq(S(1,4),s), l23 = Xg(S(2,3),s,nf);
    
    res->loop = l12*cc[0] + l13*cc[1] + 2.0*(l14*cc[2] + l23*cc[3])
      +         (2.0*(Gg(nf) + Kg(nf,al) + Gq + Kq(al)) - Cf)*(res->tree);
  }

  double ampq2g2l2::su3_ins(unsigned int nf, int p1, int p2, int p3, 
			    int p4, int p5, int p6, double al) const  
  {
    _ComplexD P[2], M[2];
    double cc[4] = {0.0,0.0,0.0,0.0}, s = S(5,6);
    
    matrix_tree_pppm(p1, p2, p3, p4, p5, p6, P);
    matrix_tree_pmpm(p1, p2, p3, p4, p5, p6, M);
    su3_ampcc(P,M, cc);
    
    matrix_tree_ppmm(p1, p2, p3, p4, p5, p6, P);
    matrix_tree_pmmm(p1, p2, p3, p4, p5, p6, M);
    su3_ampcc(P,M, cc);
    
    matrix_tree_pppm(p1, p2, p3, p4, p6, p5, P);
    matrix_tree_pmpm(p1, p2, p3, p4, p6, p5, M);
    su3_ampcc(P,M, cc);
    
    matrix_tree_ppmm(p1, p2, p3, p4, p6, p5, P);
    matrix_tree_pmmm(p1, p2, p3, p4, p6, p5, M);
    su3_ampcc(P,M, cc);
    
    double tree = -(cc[0]+cc[1]+cc[2])/Cf;
     
    //    1-loop log terms
    double l12 = Xq(S(1,2),s)+Xq(S(3,4),s)+Xg(S(1,2),s,nf)+Xg(S(3,4),s,nf), 
      l13 = Xq(S(1,3),s)+Xq(S(2,4),s)+Xg(S(1,3),s,nf)+Xg(S(2,4),s,nf),
      l14 = Xq(S(1,4),s), l23 = Xg(S(2,3),s,nf);
    
    return l12*cc[0] + l13*cc[1] + 2.0*(l14*cc[2] + l23*cc[3])
      +    (2.0*(Gg(nf) + Kg(nf,al) + Gq + Kq(al)) - Cf)*tree;
  }

  void ampq2g2l2::su3_ampcc(_ComplexD *M, double *cc)  
  {
    double S1 = 8.0*real(M[0]*conj(M[0]));
    double S2 = 8.0*real(M[1]*conj(M[1]));
    double S3 = 16.0*real(M[0]*conj(M[1]));
    
    cc[0] =  Na*(S2 + S3 - Na*S1);
    cc[1] =  Na*(S1 + S3 - Na*S2);
    cc[2] = -Na*((S1 + S2 + S3)/Nc2 + S3);
    cc[3] = -Na*Nc2*(S1 + S2);
  }

  void ampq2g2l2::
  su3_kp_mch(unsigned int nf, int pa, int p1, int p2, int p3,
	     int p4, int p5, int p6, su3_kp_i1 *res, double al) const  
  {
    _ComplexD M[2];
    int hel = (int) (8*_M_rng());
    double cc[4], xq = Gq/Cf, xg = Gg(nf)/Nc, s = S(5,6);
    
    switch(hel) {
    case 0: matrix_tree_pppm(p1, p2, p3, p4, p5, p6, M); break;
    case 1: matrix_tree_pmpm(p1, p2, p3, p4, p5, p6, M); break;
    case 2: matrix_tree_ppmm(p1, p2, p3, p4, p5, p6, M); break;
    case 3: matrix_tree_pmmm(p1, p2, p3, p4, p5, p6, M); break;
    case 4: matrix_tree_pppm(p1, p2, p3, p4, p6, p5, M); break;
    case 5: matrix_tree_pmpm(p1, p2, p3, p4, p6, p5, M); break;
    case 6: matrix_tree_ppmm(p1, p2, p3, p4, p6, p5, M); break;
    case 7: matrix_tree_pmmm(p1, p2, p3, p4, p6, p5, M); break;
    }    
    su3_ampcc(M, cc);
    
    res->tree = -(cc[0]+cc[1]+cc[2])/Cf;
    
    if(pa==p1 || pa==p4)      res->ga = xg*(cc[0]+cc[1])+xq*cc[2];
    else if(pa==p2 || pa==p3) res->ga = xq*(cc[0]+cc[1])+xg*cc[3];
    else throw("Error in ampq2g2l2::su3_kp_mch(...)");
    
    if(pa==p1) res->pa = (X(1,2)*cc[0]+X(1,3)*cc[1]+X(1,4)*cc[2])/Cf;
    if(pa==p2) res->pa = (X(1,2)*cc[0]+X(2,4)*cc[1]+X(2,3)*cc[3])/Nc;
    if(pa==p3) res->pa = (X(3,4)*cc[0]+X(1,3)*cc[1]+X(2,3)*cc[3])/Nc;
    if(pa==p4) res->pa = (X(3,4)*cc[0]+X(2,4)*cc[1]+X(1,4)*cc[2])/Cf;

    //    1-loop log terms
    double l12 = Xq(S(1,2),s)+Xq(S(3,4),s)+Xg(S(1,2),s,nf)+Xg(S(3,4),s,nf), 
      l13 = Xq(S(1,3),s)+Xq(S(2,4),s)+Xg(S(1,3),s,nf)+Xg(S(2,4),s,nf),
      l14 = Xq(S(1,4),s), l23 = Xg(S(2,3),s,nf);
    
    res->loop = l12*cc[0] + l13*cc[1] + 2.0*(l14*cc[2] + l23*cc[3])
      +         (2.0*(Gg(nf) + Kg(nf,al) + Gq + Kq(al)) - Cf)*(res->tree);
  }
  
  double ampq2g2l2::
  su3_ins_mch(unsigned int nf, int p1, int p2, int p3,
	      int p4, int p5, int p6, double al) const  
  {
    _ComplexD M[2];
    int hel = (int) (8*_M_rng());
    double cc[4], s = S(5,6);
    
    switch(hel) {
    case 0: matrix_tree_pppm(p1, p2, p3, p4, p5, p6, M); break;
    case 1: matrix_tree_pmpm(p1, p2, p3, p4, p5, p6, M); break;
    case 2: matrix_tree_ppmm(p1, p2, p3, p4, p5, p6, M); break;
    case 3: matrix_tree_pmmm(p1, p2, p3, p4, p5, p6, M); break;
    case 4: matrix_tree_pppm(p1, p2, p3, p4, p6, p5, M); break;
    case 5: matrix_tree_pmpm(p1, p2, p3, p4, p6, p5, M); break;
    case 6: matrix_tree_ppmm(p1, p2, p3, p4, p6, p5, M); break;
    case 7: matrix_tree_pmmm(p1, p2, p3, p4, p6, p5, M); break;
    }    
    su3_ampcc(M, cc);
    double tree = -(cc[0]+cc[1]+cc[2])/Cf;
    
    //    1-loop log terms
    double l12 = Xq(S(1,2),s)+Xq(S(3,4),s)+Xg(S(1,2),s,nf)+Xg(S(3,4),s,nf), 
      l13 = Xq(S(1,3),s)+Xq(S(2,4),s)+Xg(S(1,3),s,nf)+Xg(S(2,4),s,nf),
      l14 = Xq(S(1,4),s), l23 = Xg(S(2,3),s,nf);
    
    return l12*cc[0] + l13*cc[1] + 2.0*(l14*cc[2] + l23*cc[3])
      +    (2.0*(Gg(nf) + Kg(nf,al) + Gq + Kq(al)) - Cf)*tree;
  }
}   //  namespace nlo
